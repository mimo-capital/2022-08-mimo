{
  "address": "0xD332f53FCA56722F209379EEda6bc488BB29BfB5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "_a",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IMIMOProxyFactory",
          "name": "_proxyFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mimoRebalance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "CALLER_NOT_LENDING_POOL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CALLER_NOT_PROTOCOL_MANAGER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CALLER_NOT_SELECTED_MANAGER",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultOwner",
          "type": "address"
        }
      ],
      "name": "CALLER_NOT_VAULT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CANNOT_SET_TO_ADDRESS_ZERO",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualRatio",
          "type": "uint256"
        }
      ],
      "name": "FINAL_VAULT_RATIO_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "INITIATOR_NOT_AUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MANAGER_NOT_LISTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MAX_OPERATIONS_REACHED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINT_AMOUNT_GREATER_THAN_VAULT_DEBT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REBALANCE_AMOUNT_CANNOT_BE_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VAULT_NOT_UNDER_MANAGEMENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VAULT_VALUE_CHANGE_TOO_HIGH",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isManaged",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowedVariation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "varFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mcrBuffer",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMIMOManagedAction.ManagedVault",
          "name": "managedVault",
          "type": "tuple"
        }
      ],
      "name": "ManagementSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "a",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getManagedVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isManaged",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowedVariation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "varFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mcrBuffer",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMIMOManagedAction.ManagedVault",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "getManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getOperationTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mimoRebalance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyFactory",
      "outputs": [
        {
          "internalType": "contract IMIMOProxyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proxyAction",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMIMOFlashLoan.FlashLoanData",
          "name": "flData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "toCollateral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMIMORebalance.RebalanceData",
          "name": "rbData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dexIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dexTxData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IMIMOSwap.SwapData",
          "name": "swapData",
          "type": "tuple"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isManaged",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowedVariation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "varFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mcrBuffer",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMIMOManagedAction.ManagedVault",
          "name": "mgtParams",
          "type": "tuple"
        }
      ],
      "name": "setManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd82cf1052d3dec7b8ab3340209cda3f32606a75502292f8f403661aa362cc007",
  "receipt": {
    "to": null,
    "from": "0x52004FfDf72fb793d5128c9F96d631F8770e2DaC",
    "contractAddress": "0xD332f53FCA56722F209379EEda6bc488BB29BfB5",
    "transactionIndex": 4,
    "gasUsed": "2513930",
    "logsBloom": "0x
    "blockHash": "0x0c9cc7d057bf83b2cae8f2ab4289d0353044728b9ad2c84e072ccc6fb93e9cdc",
    "transactionHash": "0xd82cf1052d3dec7b8ab3340209cda3f32606a75502292f8f403661aa362cc007",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 32722024,
        "transactionHash": "0xd82cf1052d3dec7b8ab3340209cda3f32606a75502292f8f403661aa362cc007",
        "address": "0xD332f53FCA56722F209379EEda6bc488BB29BfB5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000052004ffdf72fb793d5128c9f96d631f8770e2dac"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x0c9cc7d057bf83b2cae8f2ab4289d0353044728b9ad2c84e072ccc6fb93e9cdc"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 32722024,
        "transactionHash": "0xd82cf1052d3dec7b8ab3340209cda3f32606a75502292f8f403661aa362cc007",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000052004ffdf72fb793d5128c9f96d631f8770e2dac",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x000000000000000000000000000000000000000000000000053bb0e6fc489b060000000000000000000000000000000000000000000000008c91dc53f001c400000000000000000000000000000000000000000000001839b679f5ec9785541f00000000000000000000000000000000000000000000000087562b6cf3b928fa000000000000000000000000000000000000000000001839bbb5a6d393cdef25",
        "logIndex": 24,
        "blockHash": "0x0c9cc7d057bf83b2cae8f2ab4289d0353044728b9ad2c84e072ccc6fb93e9cdc"
      }
    ],
    "blockNumber": 32722024,
    "cumulativeGasUsed": "3076252",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa802eE4bd9f449295ADb6d73f65118352420758A",
    "0x794a61358D6845594F94dc1DB02A252b5b4814aD",
    "0x44e3c7B3994ce6C29a4E64A16ff998DAb5f996a3",
    "0x871269426857dc29cfdc5fBD028a1357bC3FEa97"
  ],
  "numDeployments": 1,
  "solcInputHash": "f32a31898ee3e7d355d788de2c8f3c93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IMIMOProxyFactory\",\"name\":\"_proxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mimoRebalance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"CALLER_NOT_LENDING_POOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CALLER_NOT_PROTOCOL_MANAGER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CALLER_NOT_SELECTED_MANAGER\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultOwner\",\"type\":\"address\"}],\"name\":\"CALLER_NOT_VAULT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANNOT_SET_TO_ADDRESS_ZERO\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualRatio\",\"type\":\"uint256\"}],\"name\":\"FINAL_VAULT_RATIO_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"INITIATOR_NOT_AUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MANAGER_NOT_LISTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAX_OPERATIONS_REACHED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINT_AMOUNT_GREATER_THAN_VAULT_DEBT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REBALANCE_AMOUNT_CANNOT_BE_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VAULT_NOT_UNDER_MANAGEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VAULT_VALUE_CHANGE_TOO_HIGH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isManaged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowedVariation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"varFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcrBuffer\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMIMOManagedAction.ManagedVault\",\"name\":\"managedVault\",\"type\":\"tuple\"}],\"name\":\"ManagementSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getManagedVault\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isManaged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowedVariation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"varFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcrBuffer\",\"type\":\"uint256\"}],\"internalType\":\"struct IMIMOManagedAction.ManagedVault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getOperationTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mimoRebalance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactory\",\"outputs\":[{\"internalType\":\"contract IMIMOProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyAction\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMIMOFlashLoan.FlashLoanData\",\"name\":\"flData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"toCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMIMORebalance.RebalanceData\",\"name\":\"rbData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dexIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexTxData\",\"type\":\"bytes\"}],\"internalType\":\"struct IMIMOSwap.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isManaged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowedVariation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"varFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcrBuffer\",\"type\":\"uint256\"}],\"internalType\":\"struct IMIMOManagedAction.ManagedVault\",\"name\":\"mgtParams\",\"type\":\"tuple\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"Integrates with AAVE V3 flashLoans\",\"params\":{\"amounts\":\"Uint array with one element corresponding to the amount of the rebalanced asset\",\"assets\":\"Address array with one element corresponding to the address of the reblanced asset\",\"initiator\":\"Initiator of the flashloan; can only be MIMOProxy owner\",\"params\":\"Bytes sent by this contract containing MIMOProxy owner, RebalanceData struct and SwapData struct\",\"premiums\":\"Uint array with one element corresponding to the flashLoan fees\"},\"returns\":{\"_0\":\"True if success and False if not\"}},\"getManagedVault(uint256)\":{\"params\":{\"vaultId\":\"Vault id of the queried vault\"},\"returns\":{\"_0\":\"ManagedVault struct of a specific vault id\"}},\"getManager(address)\":{\"params\":{\"manager\":\"Manager address\"},\"returns\":{\"_0\":\"Bool value indicating if an address is allowed to manage user vaults or not\"}},\"getOperationTracker(uint256)\":{\"params\":{\"vaultId\":\"Vault id of the queried vault\"},\"returns\":{\"_0\":\"Timestamp of the last performed operation\"}},\"rebalance((address,address,uint256),(address,uint256,uint256),(uint256,bytes))\":{\"details\":\"Can only be called once a day by the manager selected by the MIMOProxy ownerReverts if operation results in vault value change above allowed variation or in vault ratio lower than min ratioNonReentrant to avoid exploits on what happens between before and after rebalance checks\",\"params\":{\"flData\":\"Flashloan data struct containing flashloan parameters\",\"rbData\":\"RebalanceData struct containing rebalance operation parameters\",\"swapData\":\"SwapData struct containing aggegator swap parameters\"}},\"setManagement(uint256,(bool,address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Can only be called by vault owner and can only appoint whitelisting managers as manger\",\"params\":{\"mgtParams\":\"ManagedVault struct containing all management parameters\",\"vaultId\":\"Vault id of the vault to be put under management\"}},\"setManager(address,bool)\":{\"details\":\"Can only be called by protocol manager\",\"params\":{\"isManager\":\"Bool value indicating if an address is allowed to manage user vaults or not\",\"manager\":\"Manager address\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"notice\":\"Routes a call from a flashloan pool to a leverage or rebalance operation\"},\"rebalance((address,address,uint256),(address,uint256,uint256),(uint256,bytes))\":{\"notice\":\"Perform a rebalance on a vault by an appointed whitelisted manager on behalf of vault ownerVault must have been created though a MIMOProxy\"},\"setManagement(uint256,(bool,address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Sets a vault management parameters\"},\"setManager(address,bool)\":{\"notice\":\"Whitelists or removes a manager\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/actions/managed/MIMOManagedRebalance.sol\":\"MIMOManagedRebalance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The rate mode that the user wants to swap to: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0x71a2d4598a4d7f7f34188e2114d7cc2208a372a2d9361c42c744f6d48e7a72cd\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x73185cd3b952eb691bbf2344b3f7a35cf8b67b33c39275e52e12b80436ea1d5c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xf3acc235689aae1094d33bfdf90e60b0c3ae1f12c5f095b8cffb69bc6880765c\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/actions/MIMOFlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { Errors } from \\\"../libraries/Errors.sol\\\";\\nimport \\\"./interfaces/IMIMOFlashLoan.sol\\\";\\n\\nabstract contract MIMOFlashLoan is IMIMOFlashLoan {\\n  using SafeERC20 for IERC20;\\n\\n  IPool public immutable lendingPool;\\n\\n  constructor(IPool _lendingPool) {\\n    if (address(_lendingPool) == address(0)) {\\n      revert Errors.CANNOT_SET_TO_ADDRESS_ZERO();\\n    }\\n    lendingPool = _lendingPool;\\n  }\\n\\n  /**\\n    @notice Helper function to format arguments to take a flashloan\\n    @param flData FlashloanData struct containing flashloan asset, amount and params\\n   */\\n  function _takeFlashLoan(FlashLoanData memory flData, bytes memory params) internal {\\n    address[] memory assets = new address[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n    uint256[] memory modes = new uint256[](1);\\n    (assets[0], amounts[0]) = (flData.asset, flData.amount);\\n\\n    lendingPool.flashLoan(flData.proxyAction, assets, amounts, modes, flData.proxyAction, params, 0);\\n  }\\n}\\n\",\"keccak256\":\"0x0158224d0b73924dbeff50ccb76b316c02170ba9a0a140783c3747ff48e4d793\",\"license\":\"MIT\"},\"contracts/actions/MIMOPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IMIMOPausable.sol\\\";\\nimport \\\"../libraries/BoringOwnable.sol\\\";\\nimport { Errors } from \\\"../libraries/Errors.sol\\\";\\n\\ncontract MIMOPausable is IMIMOPausable, BoringOwnable {\\n  bool private _paused;\\n\\n  modifier whenNotPaused() virtual {\\n    if (_paused) {\\n      revert Errors.PAUSED();\\n    }\\n    _;\\n  }\\n\\n  function pause() external override onlyOwner {\\n    _paused = true;\\n  }\\n\\n  function unpause() external override onlyOwner {\\n    _paused = false;\\n  }\\n\\n  function paused() external view override returns (bool) {\\n    return _paused;\\n  }\\n}\\n\",\"keccak256\":\"0x370bd8c063cb4aa7787545ce03197d6cd049c0c825764ce29601bb3eb2694070\",\"license\":\"MIT\"},\"contracts/actions/interfaces/IMIMOFlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\n\\nimport \\\"./IMIMOProxyAction.sol\\\";\\nimport \\\"../../core/interfaces/IAddressProvider.sol\\\";\\n\\ninterface IMIMOFlashLoan {\\n  struct FlashLoanData {\\n    address asset;\\n    address proxyAction;\\n    uint256 amount;\\n  }\\n\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n\\n  function lendingPool() external returns (IPool);\\n}\\n\",\"keccak256\":\"0xe356dec35525e7c2a2503f3304a2347f98424d321560af11b7f4101120adffa0\",\"license\":\"MIT\"},\"contracts/actions/interfaces/IMIMOPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IMIMOPausable {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe08a641bbaf5cae381672645f18f068aafa7e13deed1e09280fce46f2642bdf3\",\"license\":\"MIT\"},\"contracts/actions/interfaces/IMIMOProxyAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IMIMOProxyAction {\\n  function executeAction(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x0977ab15128a90ef361219f596735d369156c6b5a3edd99a7d69e4b2daa7f9a8\",\"license\":\"MIT\"},\"contracts/actions/interfaces/IMIMORebalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IMIMOSwap.sol\\\";\\nimport \\\"./IMIMOProxyAction.sol\\\";\\nimport \\\"../../proxy/interfaces/IMIMOProxyFactory.sol\\\";\\n\\ninterface IMIMORebalance is IMIMOProxyAction, IMIMOSwap {\\n  struct RebalanceData {\\n    IERC20 toCollateral;\\n    uint256 vaultId;\\n    uint256 mintAmount;\\n  }\\n\\n  function rebalanceOperation(\\n    IERC20 fromCollateral,\\n    uint256 swapAmount,\\n    uint256 flashloanRepayAmount,\\n    uint256 fee,\\n    RebalanceData calldata rbData,\\n    SwapData calldata swapData\\n  ) external;\\n\\n  function proxyFactory() external view returns (IMIMOProxyFactory);\\n}\\n\",\"keccak256\":\"0xfd35dc1191b639e84612edae0b5b96edacb466364832526dd88575f0066e9d50\",\"license\":\"MIT\"},\"contracts/actions/interfaces/IMIMOSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../core/dex/interfaces/IDexAddressProvider.sol\\\";\\n\\ninterface IMIMOSwap {\\n  struct SwapData {\\n    uint256 dexIndex;\\n    bytes dexTxData;\\n  }\\n\\n  function dexAP() external returns (IDexAddressProvider);\\n}\\n\",\"keccak256\":\"0xde6223ce643d306fe4bfa3d34a172f63c468d69b7c376ce9b0c5842fcf40f721\",\"license\":\"MIT\"},\"contracts/actions/managed/MIMOManagedAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IMIMOManagedAction.sol\\\";\\nimport { Errors } from \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../core/interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../libraries/WadRayMath.sol\\\";\\n\\ncontract MIMOManagedAction is IMIMOManagedAction {\\n  using WadRayMath for uint256;\\n\\n  IAddressProvider public immutable a;\\n  IMIMOProxyFactory public immutable proxyFactory;\\n\\n  mapping(uint256 => ManagedVault) internal _managedVaults;\\n  mapping(uint256 => uint256) internal _operationTracker;\\n  mapping(address => bool) internal _managers;\\n\\n  constructor(IAddressProvider _a, IMIMOProxyFactory _proxyFactory) {\\n    if (address(_a) == address(0) || address(_proxyFactory) == address(0)) {\\n      revert Errors.CANNOT_SET_TO_ADDRESS_ZERO();\\n    }\\n    a = _a;\\n    proxyFactory = _proxyFactory;\\n  }\\n\\n  /**\\n    @notice Sets a vault management parameters\\n    @dev Can only be called by vault owner and can only appoint whitelisting managers as manger\\n    @param vaultId Vault id of the vault to be put under management\\n    @param mgtParams ManagedVault struct containing all management parameters\\n   */\\n  function setManagement(uint256 vaultId, ManagedVault calldata mgtParams) external override {\\n    address vaultOwner = a.vaultsData().vaultOwner(vaultId);\\n    address mimoProxy = address(proxyFactory.getCurrentProxy(msg.sender));\\n\\n    if (mimoProxy != vaultOwner && vaultOwner != msg.sender) {\\n      revert Errors.CALLER_NOT_VAULT_OWNER(mimoProxy, vaultOwner);\\n    }\\n    if (!_managers[mgtParams.manager]) {\\n      revert Errors.MANAGER_NOT_LISTED();\\n    }\\n\\n    _managedVaults[vaultId] = mgtParams;\\n\\n    emit ManagementSet(vaultId, mgtParams);\\n  }\\n\\n  /**\\n    @notice Whitelists or removes a manager\\n    @dev Can only be called by protocol manager\\n    @param manager Manager address\\n    @param isManager Bool value indicating if an address is allowed to manage user vaults or not\\n   */\\n  function setManager(address manager, bool isManager) external override {\\n    IAccessController controller = a.controller();\\n\\n    if (!controller.hasRole(controller.MANAGER_ROLE(), msg.sender)) {\\n      revert Errors.CALLER_NOT_PROTOCOL_MANAGER();\\n    }\\n\\n    _managers[manager] = isManager;\\n\\n    emit ManagerSet(manager, isManager);\\n  }\\n\\n  /**\\n    @param vaultId Vault id of the queried vault\\n    @return ManagedVault struct of a specific vault id\\n   */\\n  function getManagedVault(uint256 vaultId) external view override returns (ManagedVault memory) {\\n    return _managedVaults[vaultId];\\n  }\\n\\n  /**\\n    @param vaultId Vault id of the queried vault\\n    @return Timestamp of the last performed operation\\n   */\\n  function getOperationTracker(uint256 vaultId) external view override returns (uint256) {\\n    return _operationTracker[vaultId];\\n  }\\n\\n  /**\\n    @param manager Manager address\\n    @return Bool value indicating if an address is allowed to manage user vaults or not\\n   */\\n  function getManager(address manager) external view override returns (bool) {\\n    return _managers[manager];\\n  }\\n\\n  /**\\n    @notice Helper function calculating LTV ratio\\n    @param vaultId Vault id of the queried vault\\n    @return Vault collateral value / vault debt\\n   */\\n  function _getVaultRatio(uint256 vaultId) internal view returns (uint256) {\\n    IAddressProvider _a = a;\\n    IVaultsDataProvider vaultsData = _a.vaultsData();\\n    IPriceFeed priceFeed = _a.priceFeed();\\n\\n    uint256 collateralBalance = vaultsData.vaultCollateralBalance(vaultId);\\n    address collateralType = vaultsData.vaultCollateralType(vaultId);\\n    uint256 collateralValue = priceFeed.convertFrom(collateralType, collateralBalance);\\n    uint256 vaultDebt = vaultsData.vaultDebt(vaultId);\\n\\n    if (vaultDebt == 0) {\\n      return (type(uint256).max);\\n    }\\n\\n    uint256 vaultRatio = collateralValue.wadDiv(vaultDebt);\\n\\n    return (vaultRatio);\\n  }\\n\\n  /**\\n    @notice Helper function determining if a vault value variation is within vault's management parameters\\n    @param managedVault ManagedVault struct of the vault being rebalanced\\n    @param rebalanceValue Value of the rebalanced collateral amount in stablex\\n    @param swapResultValue Collateral value in stablex after swap\\n    @return True if value change is below allowedVariation and false if it is above\\n   */\\n  function _isVaultVariationAllowed(\\n    ManagedVault memory managedVault,\\n    uint256 rebalanceValue,\\n    uint256 swapResultValue\\n  ) internal pure returns (bool) {\\n    if (swapResultValue >= rebalanceValue) {\\n      return true;\\n    }\\n\\n    uint256 vaultVariation = (rebalanceValue - swapResultValue).wadDiv(rebalanceValue);\\n\\n    if (vaultVariation > managedVault.allowedVariation) {\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xb81a3a128bb7455ff55366826f65dca76efb96672548fc3677d3e95742b2dd67\",\"license\":\"MIT\"},\"contracts/actions/managed/MIMOManagedRebalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./MIMOManagedAction.sol\\\";\\nimport \\\"./interfaces/IMIMOManagedRebalance.sol\\\";\\nimport \\\"../MIMOPausable.sol\\\";\\nimport \\\"../MIMOFlashLoan.sol\\\";\\nimport \\\"../../libraries/WadRayMath.sol\\\";\\n\\ncontract MIMOManagedRebalance is\\n  MIMOPausable,\\n  MIMOManagedAction,\\n  MIMOFlashLoan,\\n  ReentrancyGuard,\\n  IMIMOManagedRebalance\\n{\\n  using SafeERC20 for IERC20;\\n  using WadRayMath for uint256;\\n\\n  address public immutable mimoRebalance;\\n\\n  constructor(\\n    IAddressProvider _a,\\n    IPool _lendingPool,\\n    IMIMOProxyFactory _proxyFactory,\\n    address _mimoRebalance\\n  ) MIMOManagedAction(_a, _proxyFactory) MIMOFlashLoan(_lendingPool) {\\n    if (_mimoRebalance == address(0)) {\\n      revert Errors.CANNOT_SET_TO_ADDRESS_ZERO();\\n    }\\n\\n    mimoRebalance = _mimoRebalance;\\n  }\\n\\n  /**\\n    @notice Perform a rebalance on a vault by an appointed whitelisted manager on behalf of vault owner\\n    @notice Vault must have been created though a MIMOProxy\\n    @dev Can only be called once a day by the manager selected by the MIMOProxy owner\\n    @dev Reverts if operation results in vault value change above allowed variation or in vault ratio lower than min ratio\\n    @dev NonReentrant to avoid exploits on what happens between before and after rebalance checks\\n    @param flData Flashloan data struct containing flashloan parameters\\n    @param rbData RebalanceData struct containing rebalance operation parameters\\n    @param swapData SwapData struct containing aggegator swap parameters\\n   */\\n  function rebalance(\\n    FlashLoanData calldata flData,\\n    IMIMORebalance.RebalanceData calldata rbData,\\n    IMIMOSwap.SwapData calldata swapData\\n  ) external override whenNotPaused nonReentrant {\\n    ManagedVault memory managedVault = _managedVaults[rbData.vaultId];\\n    IVaultsDataProvider vaultsData = a.vaultsData();\\n\\n    _preRebalanceChecks(managedVault, rbData, vaultsData, flData.amount);\\n\\n    // Value of the flashloaned collateral is the same as the value of the rebalanced collateral\\n    address fromCollateral = vaultsData.vaultCollateralType(rbData.vaultId);\\n    uint256 rebalanceValue = a.priceFeed().convertFrom(fromCollateral, flData.amount);\\n    uint256 managerFee = managedVault.fixedFee + rebalanceValue.wadMul(managedVault.varFee);\\n    address vaultOwner = vaultsData.vaultOwner(rbData.vaultId);\\n    uint256 vaultBId = vaultsData.vaultId(address(rbData.toCollateral), vaultOwner);\\n    uint256 vaultBBalanceBefore = vaultsData.vaultCollateralBalance(vaultBId);\\n\\n    _takeFlashLoan(flData, abi.encode(vaultsData.vaultOwner(rbData.vaultId), managerFee, rbData, swapData));\\n\\n    _postRebalanceChecks(\\n      managedVault,\\n      rebalanceValue,\\n      vaultBBalanceBefore,\\n      rbData.vaultId,\\n      vaultOwner,\\n      address(rbData.toCollateral),\\n      vaultsData\\n    );\\n\\n    _operationTracker[rbData.vaultId] = block.timestamp;\\n\\n    IERC20(a.stablex()).safeTransfer(managedVault.manager, managerFee);\\n  }\\n\\n  /**\\n    @notice Routes a call from a flashloan pool to a leverage or rebalance operation\\n    @dev Integrates with AAVE V3 flashLoans\\n    @param assets Address array with one element corresponding to the address of the reblanced asset\\n    @param amounts Uint array with one element corresponding to the amount of the rebalanced asset\\n    @param premiums Uint array with one element corresponding to the flashLoan fees\\n    @param initiator Initiator of the flashloan; can only be MIMOProxy owner\\n    @param params Bytes sent by this contract containing MIMOProxy owner, RebalanceData struct and SwapData struct\\n    @return True if success and False if not\\n   */\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override returns (bool) {\\n    (\\n      address mimoProxy,\\n      uint256 managerFee,\\n      IMIMORebalance.RebalanceData memory rbData,\\n      IMIMOSwap.SwapData memory swapData\\n    ) = abi.decode(params, (address, uint256, IMIMORebalance.RebalanceData, IMIMOSwap.SwapData));\\n\\n    if (initiator != address(this)) {\\n      revert Errors.INITIATOR_NOT_AUTHORIZED(initiator, address(this));\\n    }\\n    if (msg.sender != address(lendingPool)) {\\n      revert Errors.CALLER_NOT_LENDING_POOL(msg.sender, address(lendingPool));\\n    }\\n\\n    IERC20 fromCollateral = IERC20(assets[0]);\\n    uint256 amount = amounts[0];\\n    fromCollateral.safeTransfer(address(mimoProxy), amounts[0]);\\n    uint256 flashloanRepayAmount = amounts[0] + premiums[0];\\n\\n    IMIMOProxy(mimoProxy).execute(\\n      mimoRebalance,\\n      abi.encodeWithSignature(\\n        \\\"rebalanceOperation(address,uint256,uint256,uint256,(address,uint256,uint256),(uint256,bytes))\\\",\\n        fromCollateral,\\n        amount,\\n        flashloanRepayAmount,\\n        managerFee,\\n        rbData,\\n        swapData\\n      )\\n    );\\n\\n    fromCollateral.safeIncreaseAllowance(address(lendingPool), flashloanRepayAmount);\\n\\n    return true;\\n  }\\n\\n  /**\\n    @notice Helper function performing pre rebalance operation sanity checks\\n    @dev Checks that :\\n      - Manager is whitelisted\\n      - Vault is under management\\n      - Caller is the vault selected manager\\n      - Rebalance amount is greater than zero\\n      - Maximum daily operations has not been exceeded\\n      - Mint amount is not greater than vault debt\\n    @param managedVault ManagedVault struct of the vault to rebalance\\n    @param rbData RebalanceData struct of the vault to rebalance\\n    @param vaultsData Cached VaultsDataProvider interface for gas saving\\n   */\\n  function _preRebalanceChecks(\\n    ManagedVault memory managedVault,\\n    IMIMORebalance.RebalanceData calldata rbData,\\n    IVaultsDataProvider vaultsData,\\n    uint256 rebalanceAmount\\n  ) internal view {\\n    if (!_managers[msg.sender]) {\\n      revert Errors.MANAGER_NOT_LISTED();\\n    }\\n    if (!managedVault.isManaged) {\\n      revert Errors.VAULT_NOT_UNDER_MANAGEMENT();\\n    }\\n    if (msg.sender != managedVault.manager) {\\n      revert Errors.CALLER_NOT_SELECTED_MANAGER();\\n    }\\n    if (rebalanceAmount == 0) {\\n      revert Errors.REBALANCE_AMOUNT_CANNOT_BE_ZERO();\\n    }\\n    if (_operationTracker[rbData.vaultId] > block.timestamp - 1 days) {\\n      revert Errors.MAX_OPERATIONS_REACHED();\\n    }\\n    if (vaultsData.vaultDebt(rbData.vaultId) < rbData.mintAmount) {\\n      revert Errors.MINT_AMOUNT_GREATER_THAN_VAULT_DEBT();\\n    }\\n  }\\n\\n  /**\\n    @notice Helper function performing post rebalance operation sanity checks\\n    @dev Checks that :\\n      - Rebalance swap slippage is below allowedVaration\\n      - Vault A ratio is equal or above minRatio\\n      - Vault B ratio is equal or above MCR + mcrBuffer\\n    @param managedVault ManagedVault struct of the vault to rebalance\\n    @param rebalanceValue Value in PAR of the amount of rebalanced collateral \\n    @param vaultBBalanceBefore Collateral balance of the vault to be rebalanced to before the rebalance operation\\n    @param vaultId Vault id of the vault to rebalance\\n    @param vaultOwner Rebalanced vault owner\\n    @param toCollateral Collateral to rebalance to\\n    @param vaultsData Cached VaultsDataProvider interface for gas saving\\n   */\\n  function _postRebalanceChecks(\\n    ManagedVault memory managedVault,\\n    uint256 rebalanceValue,\\n    uint256 vaultBBalanceBefore,\\n    uint256 vaultId,\\n    address vaultOwner,\\n    address toCollateral,\\n    IVaultsDataProvider vaultsData\\n  ) internal view {\\n    IPriceFeed priceFeed = a.priceFeed();\\n    uint256 vaultBId = vaultsData.vaultId(toCollateral, vaultOwner);\\n    uint256 vaultBBalanceAfter = vaultsData.vaultCollateralBalance(vaultBId);\\n    uint256 swapResultValue = priceFeed.convertFrom(toCollateral, vaultBBalanceAfter - vaultBBalanceBefore);\\n\\n    if (!_isVaultVariationAllowed(managedVault, rebalanceValue, swapResultValue)) {\\n      revert Errors.VAULT_VALUE_CHANGE_TOO_HIGH();\\n    }\\n\\n    uint256 vaultARatioAfter = _getVaultRatio(vaultId);\\n\\n    if (vaultARatioAfter < managedVault.minRatio) {\\n      revert Errors.FINAL_VAULT_RATIO_TOO_LOW(managedVault.minRatio, vaultARatioAfter);\\n    }\\n\\n    uint256 vaultBRatioAfter = _getVaultRatio(vaultBId);\\n    uint256 minVaultBRatio = a.config().collateralMinCollateralRatio(toCollateral) + managedVault.mcrBuffer;\\n\\n    if (vaultBRatioAfter < minVaultBRatio) {\\n      revert Errors.FINAL_VAULT_RATIO_TOO_LOW(minVaultBRatio, vaultBRatioAfter);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6d29320a596e3681091279ccb8db44298f8fc427d0961711c610d88ead00b511\",\"license\":\"MIT\"},\"contracts/actions/managed/interfaces/IMIMOManagedAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\n\\nimport \\\"../../../core/interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../../core/dex/interfaces/IDexAddressProvider.sol\\\";\\nimport \\\"../../../proxy/interfaces/IMIMOProxyFactory.sol\\\";\\n\\ninterface IMIMOManagedAction {\\n  struct ManagedVault {\\n    bool isManaged;\\n    address manager;\\n    uint256 allowedVariation;\\n    uint256 minRatio;\\n    uint256 fixedFee;\\n    uint256 varFee;\\n    uint256 mcrBuffer;\\n  }\\n\\n  event ManagerSet(address manager, bool isManager);\\n\\n  event ManagementSet(uint256 indexed vaultId, ManagedVault managedVault);\\n\\n  function setManagement(uint256 vaultId, ManagedVault calldata mgtParams) external;\\n\\n  function setManager(address manager, bool isManager) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function proxyFactory() external view returns (IMIMOProxyFactory);\\n\\n  function getManagedVault(uint256 vaultId) external view returns (ManagedVault memory);\\n\\n  function getOperationTracker(uint256 vaultId) external view returns (uint256);\\n\\n  function getManager(address manager) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3b93543857650f06943be2388c9334d0c1a37e98f9c1583890129b2aaec66d1f\",\"license\":\"MIT\"},\"contracts/actions/managed/interfaces/IMIMOManagedRebalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IMIMOManagedAction.sol\\\";\\nimport \\\"../../interfaces/IMIMOFlashLoan.sol\\\";\\nimport \\\"../../interfaces/IMIMORebalance.sol\\\";\\nimport \\\"../../interfaces/IMIMOSwap.sol\\\";\\n\\ninterface IMIMOManagedRebalance is IMIMOManagedAction {\\n  function rebalance(\\n    IMIMOFlashLoan.FlashLoanData calldata flData,\\n    IMIMORebalance.RebalanceData calldata rbData,\\n    IMIMOSwap.SwapData calldata swapData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6ffe41fb7593be0ff1aeb7f48320b7e45bcd9b49db4e326cf3a78ad51268d77f\",\"license\":\"MIT\"},\"contracts/core/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xc807bfa97bec719eeee99b97da91046aa92dfd24b9ae85923b0e81d713f04e4c\",\"license\":\"UNLICENSED\"},\"contracts/core/dex/interfaces/IDexAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IDexAddressProvider {\\n  struct Dex {\\n    address proxy;\\n    address router;\\n  }\\n\\n  event DexSet(uint256 index, address proxy, address router);\\n\\n  function setDexMapping(\\n    uint256 _index,\\n    address _proxy,\\n    address _dex\\n  ) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function getDex(uint256 index) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xc67fea7ae2f0a0c4438f4854c759d23c3a2feaface5624a8899c5166bcc04048\",\"license\":\"MIT\"},\"contracts/core/governance/interfaces/IGovernanceAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorAlpha.sol\\\";\\nimport \\\"./ITimelock.sol\\\";\\nimport \\\"./IVotingEscrow.sol\\\";\\nimport \\\"../../interfaces/IAccessController.sol\\\";\\nimport \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IMIMO.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IDebtNotifier.sol\\\";\\n\\ninterface IGovernanceAddressProvider {\\n  function setParallelAddressProvider(IAddressProvider _parallel) external;\\n\\n  function setMIMO(IMIMO _mimo) external;\\n\\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\\n\\n  function setGovernorAlpha(IGovernorAlpha _governorAlpha) external;\\n\\n  function setTimelock(ITimelock _timelock) external;\\n\\n  function setVotingEscrow(IVotingEscrow _votingEscrow) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function parallel() external view returns (IAddressProvider);\\n\\n  function mimo() external view returns (IMIMO);\\n\\n  function debtNotifier() external view returns (IDebtNotifier);\\n\\n  function governorAlpha() external view returns (IGovernorAlpha);\\n\\n  function timelock() external view returns (ITimelock);\\n\\n  function votingEscrow() external view returns (IVotingEscrow);\\n}\\n\",\"keccak256\":\"0x27689f6dd750c56338ecdf975cd112b4384cdd0dd7b9b6d49b2a5c8e281801d6\",\"license\":\"MIT\"},\"contracts/core/governance/interfaces/IGovernorAlpha.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\ninterface IGovernorAlpha {\\n  /// @notice Possible states that a proposal may be in\\n  enum ProposalState { Active, Canceled, Defeated, Succeeded, Queued, Expired, Executed }\\n\\n  struct Proposal {\\n    // Unique id for looking up a proposal\\n    uint256 id;\\n    // Creator of the proposal\\n    address proposer;\\n    // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n    uint256 eta;\\n    // the ordered list of target addresses for calls to be made\\n    address[] targets;\\n    // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    uint256[] values;\\n    // The ordered list of function signatures to be called\\n    string[] signatures;\\n    // The ordered list of calldata to be passed to each call\\n    bytes[] calldatas;\\n    // The timestamp at which voting begins: holders must delegate their votes prior to this timestamp\\n    uint256 startTime;\\n    // The timestamp at which voting ends: votes must be cast prior to this timestamp\\n    uint256 endTime;\\n    // Current number of votes in favor of this proposal\\n    uint256 forVotes;\\n    // Current number of votes in opposition to this proposal\\n    uint256 againstVotes;\\n    // Flag marking whether the proposal has been canceled\\n    bool canceled;\\n    // Flag marking whether the proposal has been executed\\n    bool executed;\\n    // Receipts of ballots for the entire set of voters\\n    mapping(address => Receipt) receipts;\\n  }\\n\\n  /// @notice Ballot receipt record for a voter\\n  struct Receipt {\\n    // Whether or not a vote has been cast\\n    bool hasVoted;\\n    // Whether or not the voter supports the proposal\\n    bool support;\\n    // The number of votes the voter had, which were cast\\n    uint256 votes;\\n  }\\n\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreated(\\n    uint256 id,\\n    address proposer,\\n    address[] targets,\\n    uint256[] values,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    uint256 startTime,\\n    uint256 endTime,\\n    string description\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\\n\\n  /// @notice An event emitted when a proposal has been canceled\\n  event ProposalCanceled(uint256 id);\\n\\n  /// @notice An event emitted when a proposal has been queued in the Timelock\\n  event ProposalQueued(uint256 id, uint256 eta);\\n\\n  /// @notice An event emitted when a proposal has been executed in the Timelock\\n  event ProposalExecuted(uint256 id);\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    string[] memory signatures,\\n    bytes[] memory calldatas,\\n    string memory description,\\n    uint256 endTime\\n  ) external returns (uint256);\\n\\n  function queue(uint256 proposalId) external;\\n\\n  function execute(uint256 proposalId) external payable;\\n\\n  function cancel(uint256 proposalId) external;\\n\\n  function castVote(uint256 proposalId, bool support) external;\\n\\n  function getActions(uint256 proposalId)\\n    external\\n    view\\n    returns (\\n      address[] memory targets,\\n      uint256[] memory values,\\n      string[] memory signatures,\\n      bytes[] memory calldatas\\n    );\\n\\n  function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory);\\n\\n  function state(uint256 proposalId) external view returns (ProposalState);\\n\\n  function quorumVotes() external view returns (uint256);\\n\\n  function proposalThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0028d4aa7650ec438dcb87baa5e7dae8fb6e8dc4a106b20d7a2c457c1723aff9\",\"license\":\"MIT\"},\"contracts/core/governance/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.0;\\n\\ninterface ITimelock {\\n  event NewAdmin(address indexed newAdmin);\\n  event NewPendingAdmin(address indexed newPendingAdmin);\\n  event NewDelay(uint256 indexed newDelay);\\n  event CancelTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n  event ExecuteTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n  event QueueTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n\\n  function acceptAdmin() external;\\n\\n  function queueTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external returns (bytes32);\\n\\n  function cancelTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external;\\n\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external payable returns (bytes memory);\\n\\n  function delay() external view returns (uint256);\\n\\n  function GRACE_PERIOD() external view returns (uint256);\\n\\n  function queuedTransactions(bytes32 hash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa83584f0eb01219738de7c5051c5e0b1f3ab692ad71ae6114e04499849876515\",\"license\":\"BSD-3-Clause\"},\"contracts/core/governance/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IGenericMiner.sol\\\";\\n\\ninterface IVotingEscrow {\\n  enum LockAction {\\n    CREATE_LOCK,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_LOCK_TIME\\n  }\\n\\n  struct LockedBalance {\\n    uint256 amount;\\n    uint256 end;\\n  }\\n\\n  /** Shared Events */\\n  event Deposit(address indexed provider, uint256 value, uint256 locktime, LockAction indexed action, uint256 ts);\\n  event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n  event Expired();\\n\\n  function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n  function increaseLockAmount(uint256 _value) external;\\n\\n  function increaseLockLength(uint256 _unlockTime) external;\\n\\n  function withdraw() external;\\n\\n  function expireContract() external;\\n\\n  function setMiner(IGenericMiner _miner) external;\\n\\n  function setMinimumLockTime(uint256 _minimumLockTime) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function balanceOf(address _owner) external view returns (uint256);\\n\\n  function balanceOfAt(address _owner, uint256 _blockTime) external view returns (uint256);\\n\\n  function stakingToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xb797387e50447a9d533ee6c81b047403b1446356b9935af3e629ddb620f3c171\",\"license\":\"AGPL-3.0\"},\"contracts/core/interfaces/IAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAccessController {\\n  event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  function grantRole(bytes32 role, address account) external;\\n\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  function MINTER_ROLE() external view returns (bytes32);\\n\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n  function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xeed0fe293b992de84f560bf03d2cab80ac98aa3fa93fd98368f844dc1a7e30d2\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessController.sol\\\";\\nimport \\\"./IConfigProvider.sol\\\";\\nimport \\\"./ISTABLEX.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"./IRatesManager.sol\\\";\\nimport \\\"./ILiquidationManager.sol\\\";\\nimport \\\"./IVaultsCore.sol\\\";\\nimport \\\"./IVaultsDataProvider.sol\\\";\\nimport \\\"./IFeeDistributor.sol\\\";\\n\\ninterface IAddressProvider {\\n  function setAccessController(IAccessController _controller) external;\\n\\n  function setConfigProvider(IConfigProvider _config) external;\\n\\n  function setVaultsCore(IVaultsCore _core) external;\\n\\n  function setStableX(ISTABLEX _stablex) external;\\n\\n  function setRatesManager(IRatesManager _ratesManager) external;\\n\\n  function setPriceFeed(IPriceFeed _priceFeed) external;\\n\\n  function setLiquidationManager(ILiquidationManager _liquidationManager) external;\\n\\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\\n\\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function config() external view returns (IConfigProvider);\\n\\n  function core() external view returns (IVaultsCore);\\n\\n  function stablex() external view returns (ISTABLEX);\\n\\n  function ratesManager() external view returns (IRatesManager);\\n\\n  function priceFeed() external view returns (IPriceFeed);\\n\\n  function liquidationManager() external view returns (ILiquidationManager);\\n\\n  function vaultsData() external view returns (IVaultsDataProvider);\\n\\n  function feeDistributor() external view returns (IFeeDistributor);\\n}\\n\",\"keccak256\":\"0xb0d8a3c59ca3637376da8acf8e5f77297e2f312439cb77d21805dfdea481ea3e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IConfigProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IConfigProvider {\\n  struct CollateralConfig {\\n    address collateralType;\\n    uint256 debtLimit;\\n    uint256 liquidationRatio;\\n    uint256 minCollateralRatio;\\n    uint256 borrowRate;\\n    uint256 originationFee;\\n    uint256 liquidationBonus;\\n    uint256 liquidationFee;\\n  }\\n\\n  event CollateralUpdated(\\n    address indexed collateralType,\\n    uint256 debtLimit,\\n    uint256 liquidationRatio,\\n    uint256 minCollateralRatio,\\n    uint256 borrowRate,\\n    uint256 originationFee,\\n    uint256 liquidationBonus,\\n    uint256 liquidationFee\\n  );\\n  event CollateralRemoved(address indexed collateralType);\\n\\n  function setCollateralConfig(\\n    address _collateralType,\\n    uint256 _debtLimit,\\n    uint256 _liquidationRatio,\\n    uint256 _minCollateralRatio,\\n    uint256 _borrowRate,\\n    uint256 _originationFee,\\n    uint256 _liquidationBonus,\\n    uint256 _liquidationFee\\n  ) external;\\n\\n  function removeCollateral(address _collateralType) external;\\n\\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\\n\\n  function setCollateralLiquidationRatio(address _collateralType, uint256 _liquidationRatio) external;\\n\\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\\n\\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\\n\\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\\n\\n  function setCollateralLiquidationBonus(address _collateralType, uint256 _liquidationBonus) external;\\n\\n  function setCollateralLiquidationFee(address _collateralType, uint256 _liquidationFee) external;\\n\\n  function setMinVotingPeriod(uint256 _minVotingPeriod) external;\\n\\n  function setMaxVotingPeriod(uint256 _maxVotingPeriod) external;\\n\\n  function setVotingQuorum(uint256 _votingQuorum) external;\\n\\n  function setProposalThreshold(uint256 _proposalThreshold) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\\n\\n  function collateralIds(address _collateralType) external view returns (uint256);\\n\\n  function numCollateralConfigs() external view returns (uint256);\\n\\n  function minVotingPeriod() external view returns (uint256);\\n\\n  function maxVotingPeriod() external view returns (uint256);\\n\\n  function votingQuorum() external view returns (uint256);\\n\\n  function proposalThreshold() external view returns (uint256);\\n\\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\\n\\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationBonus(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationFee(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d5bc200560b8cb52403fe7c0bba7c154d21593ff9b38c2bd2d7122f91f74809\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IFeeDistributor {\\n  event PayeeAdded(address indexed account, uint256 shares);\\n  event FeeReleased(uint256 income, uint256 releasedAt);\\n\\n  function release() external;\\n\\n  function changePayees(address[] memory _payees, uint256[] memory _shares) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function lastReleasedAt() external view returns (uint256);\\n\\n  function getPayees() external view returns (address[] memory);\\n\\n  function totalShares() external view returns (uint256);\\n\\n  function shares(address payee) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73c206a45e6e4b95f8db5f9c2a415fc50ff37d329b77bed4d1d1fd60381cfb93\",\"license\":\"MIT\"},\"contracts/core/interfaces/ILiquidationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface ILiquidationManager {\\n  function a() external view returns (IAddressProvider);\\n\\n  function calculateHealthFactor(\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt,\\n    uint256 _minRatio\\n  ) external view returns (uint256 healthFactor);\\n\\n  function liquidationBonus(address _collateralType, uint256 _amount) external view returns (uint256 bonus);\\n\\n  function applyLiquidationDiscount(address _collateralType, uint256 _amount)\\n    external\\n    view\\n    returns (uint256 discountedAmount);\\n\\n  function isHealthy(\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt,\\n    uint256 _minRatio\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47b143c0e66c91dde89f6536bbfe2103a4fdf2227587495729839998707fe694\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IPriceFeed {\\n  event OracleUpdated(address indexed asset, address oracle, address sender);\\n  event EurOracleUpdated(address oracle, address sender);\\n\\n  function setAssetOracle(address _asset, address _oracle) external;\\n\\n  function setEurOracle(address _oracle) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function assetOracles(address _asset) external view returns (AggregatorV3Interface);\\n\\n  function eurOracle() external view returns (AggregatorV3Interface);\\n\\n  function getAssetPrice(address _asset) external view returns (uint256);\\n\\n  function convertFrom(address _asset, uint256 _amount) external view returns (uint256);\\n\\n  function convertTo(address _asset, uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fca36e3d871f5e03fffaed8cd0badeaf36adf6e2b0b8911e6d84331b504a223\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRatesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IRatesManager {\\n  function a() external view returns (IAddressProvider);\\n\\n  //current annualized borrow rate\\n  function annualizedBorrowRate(uint256 _currentBorrowRate) external pure returns (uint256);\\n\\n  //uses current cumulative rate to calculate totalDebt based on baseDebt at time T0\\n  function calculateDebt(uint256 _baseDebt, uint256 _cumulativeRate) external pure returns (uint256);\\n\\n  //uses current cumulative rate to calculate baseDebt at time T0\\n  function calculateBaseDebt(uint256 _debt, uint256 _cumulativeRate) external pure returns (uint256);\\n\\n  //calculate a new cumulative rate\\n  function calculateCumulativeRate(\\n    uint256 _borrowRate,\\n    uint256 _cumulativeRate,\\n    uint256 _timeElapsed\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ce92f95c5919b1b51c8fc29382861a383bdbbe9cf4c1ce4ca0ca7cd3c09ae31\",\"license\":\"MIT\"},\"contracts/core/interfaces/ISTABLEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface ISTABLEX is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function a() external view returns (IAddressProvider);\\n}\\n\",\"keccak256\":\"0x236fd5aff8fa5643e0fe7e7d097874ecc69ae946172ff6422d434d8ff7532e29\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultsCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../interfaces/IVaultsCoreState.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../liquidityMining/interfaces/IDebtNotifier.sol\\\";\\n\\ninterface IVaultsCore {\\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Liquidated(\\n    uint256 indexed vaultId,\\n    uint256 debtRepaid,\\n    uint256 collateralLiquidated,\\n    address indexed owner,\\n    address indexed sender\\n  );\\n\\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\\n\\n  function deposit(address _collateralType, uint256 _amount) external;\\n\\n  function depositETH() external payable;\\n\\n  function depositByVaultId(uint256 _vaultId, uint256 _amount) external;\\n\\n  function depositETHByVaultId(uint256 _vaultId) external payable;\\n\\n  function depositAndBorrow(\\n    address _collateralType,\\n    uint256 _depositAmount,\\n    uint256 _borrowAmount\\n  ) external;\\n\\n  function depositETHAndBorrow(uint256 _borrowAmount) external payable;\\n\\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\\n\\n  function withdrawETH(uint256 _vaultId, uint256 _amount) external;\\n\\n  function borrow(uint256 _vaultId, uint256 _amount) external;\\n\\n  function repayAll(uint256 _vaultId) external;\\n\\n  function repay(uint256 _vaultId, uint256 _amount) external;\\n\\n  function liquidate(uint256 _vaultId) external;\\n\\n  function liquidatePartial(uint256 _vaultId, uint256 _amount) external;\\n\\n  function upgrade(address payable _newVaultsCore) external;\\n\\n  function acceptUpgrade(address payable _oldVaultsCore) external;\\n\\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\\n\\n  //Read only\\n  function a() external view returns (IAddressProvider);\\n\\n  function WETH() external view returns (IWETH);\\n\\n  function debtNotifier() external view returns (IDebtNotifier);\\n\\n  function state() external view returns (IVaultsCoreState);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0732c2a47b48729aa454c8ff6fe9081e8018967cc797ddce20785d3455610703\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultsCoreState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\nimport \\\"./IAddressProvider.sol\\\";\\nimport \\\"../v1/interfaces/IVaultsCoreV1.sol\\\";\\n\\ninterface IVaultsCoreState {\\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\\n\\n  function initializeRates(address _collateralType) external;\\n\\n  function refresh() external;\\n\\n  function refreshCollateral(address collateralType) external;\\n\\n  function syncState(IVaultsCoreState _stateAddress) external;\\n\\n  function syncStateFromV1(IVaultsCoreV1 _core) external;\\n\\n  //Read only\\n  function a() external view returns (IAddressProvider);\\n\\n  function availableIncome() external view returns (uint256);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n\\n  function lastRefresh(address _collateralType) external view returns (uint256);\\n\\n  function synced() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x09444b73561a89e15bb56f0fe38fe46926a232dc9c13eea652a635982e08aabb\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultsDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IVaultsDataProvider {\\n  struct Vault {\\n    // borrowedType support USDX / PAR\\n    address collateralType;\\n    address owner;\\n    uint256 collateralBalance;\\n    uint256 baseDebt;\\n    uint256 createdAt;\\n  }\\n\\n  //Write\\n  function createVault(address _collateralType, address _owner) external returns (uint256);\\n\\n  function setCollateralBalance(uint256 _id, uint256 _balance) external;\\n\\n  function setBaseDebt(uint256 _id, uint256 _newBaseDebt) external;\\n\\n  // Read\\n  function a() external view returns (IAddressProvider);\\n\\n  function baseDebt(address _collateralType) external view returns (uint256);\\n\\n  function vaultCount() external view returns (uint256);\\n\\n  function vaults(uint256 _id) external view returns (Vault memory);\\n\\n  function vaultOwner(uint256 _id) external view returns (address);\\n\\n  function vaultCollateralType(uint256 _id) external view returns (address);\\n\\n  function vaultCollateralBalance(uint256 _id) external view returns (uint256);\\n\\n  function vaultBaseDebt(uint256 _id) external view returns (uint256);\\n\\n  function vaultId(address _collateralType, address _owner) external view returns (uint256);\\n\\n  function vaultExists(uint256 _id) external view returns (bool);\\n\\n  function vaultDebt(uint256 _vaultId) external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function collateralDebt(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0848fb3f781b7f45b5e798b9137a412c14b539be9f8af485f1c8d3261b828127\",\"license\":\"MIT\"},\"contracts/core/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function withdraw(uint256 wad) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x77e05f1d05c608be39e349a0ede3c601f0dfca2c5391db396399865ea09f978d\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/IDebtNotifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../governance/interfaces/IGovernanceAddressProvider.sol\\\";\\nimport \\\"./ISupplyMiner.sol\\\";\\n\\ninterface IDebtNotifier {\\n    function debtChanged(uint256 _vaultId) external;\\n\\n    function setCollateralSupplyMiner(\\n        address collateral,\\n        ISupplyMiner supplyMiner\\n    ) external;\\n\\n    function a() external view returns (IGovernanceAddressProvider);\\n\\n    function collateralSupplyMinerMapping(address collateral)\\n        external\\n        view\\n        returns (ISupplyMiner);\\n}\\n\",\"keccak256\":\"0xebc8abcf2d1ddeb76fd14ddd61fdda7a82436dddaa91d205b949922cfeab6b55\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/IGenericMiner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../governance/interfaces/IGovernanceAddressProvider.sol\\\";\\n\\ninterface IGenericMiner {\\n  struct UserInfo {\\n    uint256 stake;\\n    uint256 accAmountPerShare; // User's accAmountPerShare\\n  }\\n\\n  /// @dev This emit when a users' productivity has changed\\n  /// It emits with the user's address and the the value after the change.\\n  event StakeIncreased(address indexed user, uint256 stake);\\n\\n  /// @dev This emit when a users' productivity has changed\\n  /// It emits with the user's address and the the value after the change.\\n  event StakeDecreased(address indexed user, uint256 stake);\\n\\n  function releaseMIMO(address _user) external;\\n\\n  function a() external view returns (IGovernanceAddressProvider);\\n\\n  function stake(address _user) external view returns (uint256);\\n\\n  function pendingMIMO(address _user) external view returns (uint256);\\n\\n  function totalStake() external view returns (uint256);\\n\\n  function userInfo(address _user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0x41a4ed19296dce5141bb394e8a030951d780d356084a6b2327cfebdafff376f1\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/IMIMO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMIMO is IERC20 {\\n  function burn(address account, uint256 amount) external;\\n\\n  function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9c93054d9928423a32c603eba23c7dd1cf847f4ce0b49826002acb2a38ba8b6a\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/ISupplyMiner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\ninterface ISupplyMiner {\\n  function baseDebtChanged(address user, uint256 newBaseDebt) external;\\n}\\n\",\"keccak256\":\"0xd74c677a4f9cba99f9aa175bc953460ad01bb767d198de6344fd4c1c0a9878c4\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/IAddressProviderV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IConfigProviderV1.sol\\\";\\nimport \\\"./ILiquidationManagerV1.sol\\\";\\nimport \\\"./IVaultsCoreV1.sol\\\";\\nimport \\\"../../interfaces/IVaultsCore.sol\\\";\\nimport \\\"../../interfaces/IAccessController.sol\\\";\\nimport \\\"../../interfaces/ISTABLEX.sol\\\";\\nimport \\\"../../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../../interfaces/IRatesManager.sol\\\";\\nimport \\\"../../interfaces/IVaultsDataProvider.sol\\\";\\nimport \\\"../../interfaces/IFeeDistributor.sol\\\";\\n\\ninterface IAddressProviderV1 {\\n  function setAccessController(IAccessController _controller) external;\\n\\n  function setConfigProvider(IConfigProviderV1 _config) external;\\n\\n  function setVaultsCore(IVaultsCoreV1 _core) external;\\n\\n  function setStableX(ISTABLEX _stablex) external;\\n\\n  function setRatesManager(IRatesManager _ratesManager) external;\\n\\n  function setPriceFeed(IPriceFeed _priceFeed) external;\\n\\n  function setLiquidationManager(ILiquidationManagerV1 _liquidationManager) external;\\n\\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\\n\\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function config() external view returns (IConfigProviderV1);\\n\\n  function core() external view returns (IVaultsCoreV1);\\n\\n  function stablex() external view returns (ISTABLEX);\\n\\n  function ratesManager() external view returns (IRatesManager);\\n\\n  function priceFeed() external view returns (IPriceFeed);\\n\\n  function liquidationManager() external view returns (ILiquidationManagerV1);\\n\\n  function vaultsData() external view returns (IVaultsDataProvider);\\n\\n  function feeDistributor() external view returns (IFeeDistributor);\\n}\\n\",\"keccak256\":\"0x90c7edf8c7e2c6a911eb1e5d97ea185a8a8d55530b10757710bced44aa1c29d7\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/IConfigProviderV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface IConfigProviderV1 {\\n  struct CollateralConfig {\\n    address collateralType;\\n    uint256 debtLimit;\\n    uint256 minCollateralRatio;\\n    uint256 borrowRate;\\n    uint256 originationFee;\\n  }\\n\\n  event CollateralUpdated(\\n    address indexed collateralType,\\n    uint256 debtLimit,\\n    uint256 minCollateralRatio,\\n    uint256 borrowRate,\\n    uint256 originationFee\\n  );\\n  event CollateralRemoved(address indexed collateralType);\\n\\n  function setCollateralConfig(\\n    address _collateralType,\\n    uint256 _debtLimit,\\n    uint256 _minCollateralRatio,\\n    uint256 _borrowRate,\\n    uint256 _originationFee\\n  ) external;\\n\\n  function removeCollateral(address _collateralType) external;\\n\\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\\n\\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\\n\\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\\n\\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\\n\\n  function setLiquidationBonus(uint256 _bonus) external;\\n\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\\n\\n  function collateralIds(address _collateralType) external view returns (uint256);\\n\\n  function numCollateralConfigs() external view returns (uint256);\\n\\n  function liquidationBonus() external view returns (uint256);\\n\\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\\n\\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\\n\\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x222bcabed1707aa5588c87f8049d6c0babba04d8460b8fb434a2639c2655199f\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/ILiquidationManagerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface ILiquidationManagerV1 {\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function calculateHealthFactor(\\n    address _collateralType,\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt\\n  ) external view returns (uint256 healthFactor);\\n\\n  function liquidationBonus(uint256 _amount) external view returns (uint256 bonus);\\n\\n  function applyLiquidationDiscount(uint256 _amount) external view returns (uint256 discountedAmount);\\n\\n  function isHealthy(\\n    address _collateralType,\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa1fa92ce5417c4375d94956c7d78bc5be5b122ae5726134f6e32bfa360b8e40\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/IVaultsCoreV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface IVaultsCoreV1 {\\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Liquidated(\\n    uint256 indexed vaultId,\\n    uint256 debtRepaid,\\n    uint256 collateralLiquidated,\\n    address indexed owner,\\n    address indexed sender\\n  );\\n\\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\\n\\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\\n\\n  function deposit(address _collateralType, uint256 _amount) external;\\n\\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\\n\\n  function withdrawAll(uint256 _vaultId) external;\\n\\n  function borrow(uint256 _vaultId, uint256 _amount) external;\\n\\n  function repayAll(uint256 _vaultId) external;\\n\\n  function repay(uint256 _vaultId, uint256 _amount) external;\\n\\n  function liquidate(uint256 _vaultId) external;\\n\\n  //Refresh\\n  function initializeRates(address _collateralType) external;\\n\\n  function refresh() external;\\n\\n  function refreshCollateral(address collateralType) external;\\n\\n  //upgrade\\n  function upgrade(address _newVaultsCore) external;\\n\\n  //Read only\\n\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function availableIncome() external view returns (uint256);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n\\n  function lastRefresh(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a9f2c29b6c96ce9e3b036371762796d2530aff09be35a76ebbc9fffdd328bb0\",\"license\":\"MIT\"},\"contracts/libraries/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n  address public owner;\\n  address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice `owner` defaults to msg.sender on construction.\\n  constructor() {\\n    owner = msg.sender;\\n    emit OwnershipTransferred(address(0), msg.sender);\\n  }\\n\\n  /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n  /// Can only be invoked by the current `owner`.\\n  /// @param newOwner Address of the new owner.\\n  /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n  /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n  function transferOwnership(\\n    address newOwner,\\n    bool direct,\\n    bool renounce\\n  ) public onlyOwner {\\n    if (direct) {\\n      // Checks\\n      require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n      // Effects\\n      emit OwnershipTransferred(owner, newOwner);\\n      owner = newOwner;\\n      pendingOwner = address(0);\\n    } else {\\n      // Effects\\n      pendingOwner = newOwner;\\n    }\\n  }\\n\\n  /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n  function claimOwnership() public {\\n    address _pendingOwner = pendingOwner;\\n\\n    // Checks\\n    require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n    // Effects\\n    emit OwnershipTransferred(owner, _pendingOwner);\\n    owner = _pendingOwner;\\n    pendingOwner = address(0);\\n  }\\n\\n  /// @notice Only allows the `owner` to execute the function.\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2759927451e609747b0e08475d9b65e99d0e830e3afda1c2d2d8a248bc887b63\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\n\\n/**\\n    @title Errors library\\n    @author MIMO\\n    @notice Defines the error messages emtted by the different contracts of the MIMO protocol\\n */\\n\\nlibrary Errors {\\n  error CANNOT_SET_TO_ADDRESS_ZERO();\\n  error INITIATOR_NOT_AUTHORIZED(address actual, address expected);\\n  error CALLER_NOT_LENDING_POOL(address actual, address expected);\\n  error CANNOT_REPAY_FLASHLOAN();\\n  error INVALID_AGGREGATOR();\\n  error AGGREGATOR_CALL_FAILED();\\n  error EXECUTION_NOT_AUTHORIZED(address owner, address caller, address target, bytes4 selector);\\n  error EXECUTION_REVERTED();\\n  error NOT_OWNER(address owner, address caller);\\n  error OWNER_CHANGED(address originalOwner, address newOwner);\\n  error TARGET_INVALID(address target);\\n  error CALLER_NOT_VAULT_OWNER(address callerProxy, address vaultOwner);\\n  error CALLER_NOT_PROTOCOL_MANAGER();\\n  error MANAGER_NOT_LISTED();\\n  error VAULT_NOT_UNDER_MANAGEMENT();\\n  error CALLER_NOT_SELECTED_MANAGER();\\n  error PROXY_ALREADY_EXISTS(address owner);\\n  error MAX_OPERATIONS_REACHED();\\n  error MINT_AMOUNT_GREATER_THAN_VAULT_DEBT();\\n  error VAULT_VALUE_CHANGE_TOO_HIGH();\\n  error FINAL_VAULT_RATIO_TOO_LOW(uint256 minRatio, uint256 actualRatio);\\n  error VAULT_NOT_AUTOMATED();\\n  error VAULT_TRIGGER_RATIO_NOT_REACHED(uint256 actual, uint256 expected);\\n  error TARGETS_LENGTH_DIFFERENT_THAN_DATA_LENGTH(uint256 targetsLength, uint256 dataLength);\\n  error LOW_LEVEL_CALL_FAILED();\\n  error REBALANCE_AMOUNT_CANNOT_BE_ZERO();\\n  error VARIABLE_FEE_TOO_HIGH(uint256 maxVarFee, uint256 actualVarFee);\\n  error VAULT_NOT_INITIALIZED(uint256 vaultId);\\n  error ALREADY_OWNER(address owner, address ownedProxy);\\n  error CALLER_NOT_PENDING_OWNER(address caller, address pendingOwner);\\n  error UNAUTHORIZED_CALLER();\\n  error PAUSED();\\n}\\n\",\"keccak256\":\"0xc1749264f50f0c27653f862ccb7a87e1930603f67cc0bbb29ae533ab323ea155\",\"license\":\"Unlicense\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n        b := add(b, 1)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n        revert(0, 0)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x681682d3fc1104c907ecdcc26d5cddefe82acf4231396124e5cabcca318a788d\",\"license\":\"BUSL-1.1\"},\"contracts/proxy/interfaces/IMIMOProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\n\\nimport \\\"./IMIMOProxyFactory.sol\\\";\\n\\n/// @title IMIMOProxy\\n/// @notice Proxy contract to compose transactions on owner's behalf.\\ninterface IMIMOProxy {\\n  event Execute(address indexed target, bytes data, bytes response);\\n\\n  function execute(address target, bytes calldata data) external payable returns (bytes memory response);\\n\\n  function proxyFactory() external returns (IMIMOProxyFactory);\\n}\\n\",\"keccak256\":\"0x3b1ba487a3e28063c13b5bf5dd78d738f232f7a801a0d164e499843772187532\",\"license\":\"Unlicense\"},\"contracts/proxy/interfaces/IMIMOProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMIMOProxy.sol\\\";\\nimport \\\"./IMIMOProxyGuard.sol\\\";\\n\\n/// @title IMIMOProxyFactory\\n/// @notice Deploys new proxies with CREATE2.\\ninterface IMIMOProxyFactory {\\n  struct ProxyState {\\n    address owner;\\n    IMIMOProxyGuard proxyGuard;\\n    uint256 minGas;\\n  }\\n\\n  event ProxyDeployed(address indexed owner, address indexed proxy, ProxyState proxyState);\\n\\n  event PermissionsCleared(address indexed proxy, address newProxyGuard);\\n\\n  event OwnershipTransferred(address indexed proxy, address indexed previousOwner, address indexed newOwner);\\n\\n  event OwnershipClaimed(address indexed proxy, address indexed newOwner);\\n\\n  event MinGasSet(address indexed proxy, uint256 minGas);\\n\\n  function deploy() external;\\n\\n  function transferOwnership(address proxy, address newOwner) external;\\n\\n  function claimOwnership(address proxy, bool clear) external;\\n\\n  function clearPermissions(address proxy) external;\\n\\n  function setMinGas(address proxy, uint256 minGas) external;\\n\\n  function mimoProxyGuardBase() external returns (address);\\n\\n  function isProxy(address proxy) external returns (bool result);\\n\\n  function VERSION() external view returns (uint256);\\n\\n  function getProxyState(address proxy) external view returns (ProxyState memory proxyState);\\n\\n  function getCurrentProxy(address owner) external view returns (IMIMOProxy proxy);\\n\\n  function getPendingOwner(address proxy) external view returns (address pendingOwner);\\n}\\n\",\"keccak256\":\"0xd679829ba199a63195d7ef3db753643ba620c7b2d2b8e8293069a8dbf8f2a373\",\"license\":\"Unlicense\"},\"contracts/proxy/interfaces/IMIMOProxyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\n\\nimport \\\"./IMIMOProxyFactory.sol\\\";\\n\\ninterface IMIMOProxyGuard {\\n  event PermissionSet(address indexed envoy, address indexed target, bytes4 selector, bool permission);\\n\\n  function initialize(address proxyFactory, address proxy) external;\\n\\n  function setPermission(\\n    address envoy,\\n    address target,\\n    bytes4 selector,\\n    bool permission\\n  ) external;\\n\\n  function getPermission(\\n    address envoy,\\n    address target,\\n    bytes4 selector\\n  ) external view returns (bool);\\n\\n  function getProxy() external view returns (address proxy);\\n\\n  function getProxyFactory() external view returns (IMIMOProxyFactory proxyFactory);\\n}\\n\",\"keccak256\":\"0xceebcf2978b34653aaa522ee14ab436aee7e795bdd9c071bd202fb7b8b6a74fa\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638456cb59116100a2578063a5e90eee11610071578063a5e90eee146102d0578063b68a07b9146102e3578063c10f1a7514610311578063e30c397814610338578063ffb9609c1461034b57600080fd5b80638456cb591461027b5780638da5cb5b14610283578063920f5c8414610296578063a59a9973146102a957600080fd5b80633f4ba83a116100e95780633f4ba83a146101d75780634e71e0c8146101df5780635268d349146101e75780635c975abb146101fa5780636ba2dd881461020c57600080fd5b8063078dfbe71461011b5780630dbe671f146101305780631cc2c5ce146101745780633d5840631461019b575b600080fd5b61012e610129366004612149565b61035e565b005b6101577f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101577f000000000000000000000000000000000000000000000000000000000000000081565b6101c76101a9366004612194565b6001600160a01b031660009081526004602052604090205460ff1690565b604051901515815260200161016b565b61012e610475565b61012e6104ae565b61012e6101f53660046121c9565b61056b565b600154600160a01b900460ff166101c7565b61021f61021a366004612225565b610b8a565b60405161016b91908151151581526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0918201519181019190915260e00190565b61012e610c46565b600054610157906001600160a01b031681565b6101c76102a436600461228a565b610c85565b6101577f000000000000000000000000000000000000000000000000000000000000000081565b61012e6102de36600461238f565b610f48565b6103036102f1366004612225565b60009081526003602052604090205490565b60405190815260200161016b565b6101577f000000000000000000000000000000000000000000000000000000000000000081565b600154610157906001600160a01b031681565b61012e6103593660046123c8565b611126565b6000546001600160a01b031633146103915760405162461bcd60e51b815260040161038890612401565b60405180910390fd5b8115610454576001600160a01b0383161515806103ab5750805b6103ef5760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152606401610388565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055505050565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b6000546001600160a01b0316331461049f5760405162461bcd60e51b815260040161038890612401565b6001805460ff60a01b19169055565b6001546001600160a01b03163381146105095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610388565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b600154600160a01b900460ff161561059657604051632a6ab56360e21b815260040160405180910390fd5b600260055414156105e95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610388565b6002600581815560208085013560009081528382526040808220815160e081018352815460ff8116151582526001600160a01b036101009091048116828701526001830154828501529682015460608201526003820154608082015260048083015460a0830152919095015460c086015281516365d5528760e01b81529151949592947f0000000000000000000000000000000000000000000000000000000000000000909316936365d552879383830193919290918290030181865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190612436565b90506106ee82858388604001356113ad565b60405163b508bc5960e01b8152602085013560048201526000906001600160a01b0383169063b508bc5990602401602060405180830381865afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d9190612436565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190612436565b60408051630392048f60e51b81526001600160a01b038581166004830152918a0135602482015291169063724091e090604401602060405180830381865afa158015610833573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108579190612453565b905060006108728560a001518361152890919063ffffffff16565b85608001516108819190612482565b604051633c2ecfe560e01b8152602089013560048201529091506000906001600160a01b03861690633c2ecfe590602401602060405180830381865afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190612436565b905060006001600160a01b03861663bd44815f61091360208c018c612194565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529085166024820152604401602060405180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190612453565b60405163828f8def60e01b8152600481018290529091506000906001600160a01b0388169063828f8def90602401602060405180830381865afa1580156109ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f29190612453565b9050610a9c610a06368d90038d018d61252d565b604051633c2ecfe560e01b815260208d013560048201526001600160a01b038a1690633c2ecfe590602401602060405180830381865afa158015610a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a729190612436565b868d8d604051602001610a889493929190612598565b604051602081830303815290604052611560565b610ac18886838d60200135878f6000016020810190610abb9190612194565b8d6116a8565b42600360008c60200135815260200190815260200160002081905550610b788860200151857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316d8a5a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b689190612436565b6001600160a01b03169190611a53565b50506001600555505050505050505050565b610bd56040518060e0016040528060001515815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260026020818152604092839020835160e081018552815460ff81161515825261010090046001600160a01b03169281019290925260018101549382019390935290820154606082015260038201546080820152600482015460a082015260059091015460c082015290565b6000546001600160a01b03163314610c705760405162461bcd60e51b815260040161038890612401565b6001805460ff60a01b1916600160a01b179055565b600080808080610c9786880188612688565b9350935093509350306001600160a01b0316886001600160a01b031614610ce257604051637c6b83fd60e01b81526001600160a01b0389166004820152306024820152604401610388565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d5c57604051631489d26d60e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610388565b60008e8e6000818110610d7157610d716127a4565b9050602002016020810190610d869190612194565b905060008d8d6000818110610d9d57610d9d6127a4565b905060200201359050610ddd868f8f6000818110610dbd57610dbd6127a4565b90506020020135846001600160a01b0316611a539092919063ffffffff16565b60008c8c6000818110610df257610df26127a4565b905060200201358f8f6000818110610e0c57610e0c6127a4565b90506020020135610e1d9190612482565b9050866001600160a01b0316631cff79cd7f00000000000000000000000000000000000000000000000000000000000000008585858b8b8b604051602401610e6a96959493929190612812565b60408051601f198184030181529181526020820180516001600160e01b031663b0597c8760e01b1790525160e084901b6001600160e01b0319168152610eb4929190600401612888565b6000604051808303816000875af1158015610ed3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610efb91908101906128ac565b50610f306001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000083611ab6565b60019750505050505050509998505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcc9190612436565b9050806001600160a01b03166391d14854826001600160a01b031663ec87621c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190612453565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a59190612923565b6110c25760405163539dd6ad60e11b815260040160405180910390fd5b6001600160a01b038316600081815260046020908152604091829020805460ff19168615159081179091558251938452908301527fff83ce179bad4fbdb0e98074011487cde624295a52d8189d92d5d8b06c914eda910160405180910390a1505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365d552876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190612436565b6001600160a01b0316633c2ecfe5846040518263ffffffff1660e01b81526004016111d791815260200190565b602060405180830381865afa1580156111f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112189190612436565b6040516326558c5d60e21b81523360048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639956317490602401602060405180830381865afa158015611282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a69190612436565b9050816001600160a01b0316816001600160a01b0316141580156112d357506001600160a01b0382163314155b156113045760405163295ab81160e11b81526001600160a01b03808316600483015283166024820152604401610388565b600460006113186040860160208701612194565b6001600160a01b0316815260208101919091526040016000205460ff1661135257604051636fe16ef160e01b815260040160405180910390fd5b6000848152600260205260409020839061136c8282612940565b905050837fa365d7b23d8538b3dedebbe882ad535b6b15ce9db71cc2b63bb9e39df99d866c8460405161139f91906129c1565b60405180910390a250505050565b3360009081526004602052604090205460ff166113dd57604051636fe16ef160e01b815260040160405180910390fd5b83516113fc57604051631fbe06e960e21b815260040160405180910390fd5b83602001516001600160a01b0316336001600160a01b031614611432576040516392582dc360e01b815260040160405180910390fd5b8061145057604051631e2cf93d60e31b815260040160405180910390fd5b61145d6201518042612a29565b6020808501356000908152600390915260409020541115611491576040516359caa18960e01b815260040160405180910390fd5b6040805163d310f49b60e01b81526020850135600482015290840135906001600160a01b0384169063d310f49b90602401602060405180830381865afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115039190612453565b101561152257604051631eca6e7b60e11b815260040160405180910390fd5b50505050565b600081156706f05b59d3b20000198390048411151761154657600080fd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b604080516001808252818301909252600091602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905084600001518560400151846000815181106115e5576115e56127a4565b60200260200101846000815181106115ff576115ff6127a4565b6020908102919091018101929092526001600160a01b03928316905286015160405163ab9c4b5d60e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163ab9c4b5d9161166f9187908790879084908c90600090600401612a7b565b600060405180830381600087803b15801561168957600080fd5b505af115801561169d573d6000803e3d6000fd5b505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172c9190612436565b60405163bd44815f60e01b81526001600160a01b038581166004830152868116602483015291925060009184169063bd44815f90604401602060405180830381865afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190612453565b60405163828f8def60e01b8152600481018290529091506000906001600160a01b0385169063828f8def90602401602060405180830381865afa1580156117ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118139190612453565b905060006001600160a01b03841663724091e0876118318c86612a29565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa15801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190612453565b90506118ab8b8b83611b68565b6118c85760405163330998e160e11b815260040160405180910390fd5b60006118d389611bb4565b90508b6060015181101561190a5760608c015160405163dfab2be560e01b8152600481019190915260248101829052604401610388565b600061191585611bb4565b905060008d60c001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166379502c556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561197c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a09190612436565b604051638a70473b60e01b81526001600160a01b038c811660048301529190911690638a70473b90602401602060405180830381865afa1580156119e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0c9190612453565b611a169190612482565b905080821015611a435760405163dfab2be560e01b81526004810182905260248101839052604401610388565b5050505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261047090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e99565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2b9190612453565b611b359190612482565b6040516001600160a01b03851660248201526044810182905290915061152290859063095ea7b360e01b90606401611a7f565b6000828210611b7957506001611bad565b6000611b8f84611b898582612a29565b90611f6b565b90508460400151811115611ba7576000915050611bad565b60019150505b9392505050565b6000807f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b03166365d552876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3e9190612436565b90506000826001600160a01b031663741bef1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca49190612436565b60405163828f8def60e01b8152600481018790529091506000906001600160a01b0384169063828f8def90602401602060405180830381865afa158015611cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d139190612453565b60405163b508bc5960e01b8152600481018890529091506000906001600160a01b0385169063b508bc5990602401602060405180830381865afa158015611d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d829190612436565b604051630392048f60e51b81526001600160a01b0380831660048301526024820185905291925060009185169063724091e090604401602060405180830381865afa158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190612453565b60405163d310f49b60e01b8152600481018a90529091506000906001600160a01b0387169063d310f49b90602401602060405180830381865afa158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e689190612453565b905080611e7f575060001998975050505050505050565b6000611e8b8383611f6b565b9a9950505050505050505050565b6000611eee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fa29092919063ffffffff16565b8051909150156104705780806020019051810190611f0c9190612923565b6104705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610388565b60008115670de0b6b3a764000060028404190484111715611f8b57600080fd5b50670de0b6b3a76400009190910260028204010490565b6060611fb18484600085611fb9565b949350505050565b60608247101561201a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610388565b6001600160a01b0385163b6120715760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610388565b600080866001600160a01b0316858760405161208d9190612b37565b60006040518083038185875af1925050503d80600081146120ca576040519150601f19603f3d011682016040523d82523d6000602084013e6120cf565b606091505b50915091506120df8282866120ea565b979650505050505050565b606083156120f9575081611bad565b8251156121095782518084602001fd5b8160405162461bcd60e51b81526004016103889190612b53565b6001600160a01b038116811461213857600080fd5b50565b801515811461213857600080fd5b60008060006060848603121561215e57600080fd5b833561216981612123565b925060208401356121798161213b565b915060408401356121898161213b565b809150509250925092565b6000602082840312156121a657600080fd5b8135611bad81612123565b6000606082840312156121c357600080fd5b50919050565b600080600060e084860312156121de57600080fd5b6121e885856121b1565b92506121f785606086016121b1565b915060c084013567ffffffffffffffff81111561221357600080fd5b84016040818703121561218957600080fd5b60006020828403121561223757600080fd5b5035919050565b60008083601f84011261225057600080fd5b50813567ffffffffffffffff81111561226857600080fd5b6020830191508360208260051b850101111561228357600080fd5b9250929050565b600080600080600080600080600060a08a8c0312156122a857600080fd5b893567ffffffffffffffff808211156122c057600080fd5b6122cc8d838e0161223e565b909b50995060208c01359150808211156122e557600080fd5b6122f18d838e0161223e565b909950975060408c013591508082111561230a57600080fd5b6123168d838e0161223e565b909750955060608c0135915061232b82612123565b90935060808b0135908082111561234157600080fd5b818c0191508c601f83011261235557600080fd5b81358181111561236457600080fd5b8d602082850101111561237657600080fd5b6020830194508093505050509295985092959850929598565b600080604083850312156123a257600080fd5b82356123ad81612123565b915060208301356123bd8161213b565b809150509250929050565b6000808284036101008112156123dd57600080fd5b8335925060e0601f19820112156123f357600080fd5b506020830190509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561244857600080fd5b8151611bad81612123565b60006020828403121561246557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156124955761249561246c565b500190565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156124d3576124d361249a565b60405290565b6040805190810167ffffffffffffffff811182821017156124d3576124d361249a565b604051601f8201601f1916810167ffffffffffffffff811182821017156125255761252561249a565b604052919050565b60006060828403121561253f57600080fd5b6040516060810181811067ffffffffffffffff821117156125625761256261249a565b604052823561257081612123565b8152602083013561258081612123565b60208201526040928301359281019290925250919050565b6001600160a01b0385811682526020820185905260009084356125ba81612123565b81811660408501525050602084013560608301526040840135608083015260c060a0830152823560c08301526020830135601e198436030181126125fd57600080fd5b8301803567ffffffffffffffff81111561261657600080fd5b80360385131561262557600080fd5b604060e0850152806101008501526101208160208401828701376000858301820152601f909101601f19169093019092019695505050505050565b600067ffffffffffffffff82111561267a5761267a61249a565b50601f01601f191660200190565b60008060008084860360c081121561269f57600080fd5b85356126aa81612123565b945060208681013594506060603f19830112156126c657600080fd5b6126ce6124b0565b915060408701356126de81612123565b82526060870135818301526080870135604083015290925060a08601359067ffffffffffffffff8083111561271257600080fd5b918701916040838a03121561272657600080fd5b61272e6124d9565b83358152828401358281111561274357600080fd5b80850194505089601f85011261275857600080fd5b8335915061276d61276883612660565b6124fc565b8281528a8484870101111561278157600080fd5b828486018583013760009281018401929092529182015294979396509194505050565b634e487b7160e01b600052603260045260246000fd5b60005b838110156127d55781810151838201526020016127bd565b838111156115225750506000910152565b600081518084526127fe8160208601602086016127ba565b601f01601f19169290920160200192915050565b600061010060018060a01b03808a16845288602085015287604085015286606085015280865116608085015250602085015160a0840152604085015160c08401528060e0840152835181840152506020830151604061012084015261287b6101408401826127e6565b9998505050505050505050565b6001600160a01b0383168152604060208201819052600090611fb1908301846127e6565b6000602082840312156128be57600080fd5b815167ffffffffffffffff8111156128d557600080fd5b8201601f810184136128e657600080fd5b80516128f461276882612660565b81815285602083850101111561290957600080fd5b61291a8260208301602086016127ba565b95945050505050565b60006020828403121561293557600080fd5b8151611bad8161213b565b813561294b8161213b565b815490151560ff1660ff1991909116178155602082013561296b81612123565b8154610100600160a81b031916600882901b610100600160a81b03161782555060408201356001820155606082013560028201556080820135600382015560a0820135600482015560c082013560058201555050565b60e0810182356129d08161213b565b1515825260208301356129e281612123565b60018060a01b03811660208401525060408301356040830152606083013560608301526080830135608083015260a083013560a083015260c083013560c083015292915050565b600082821015612a3b57612a3b61246c565b500390565b600081518084526020808501945080840160005b83811015612a7057815187529582019590820190600101612a54565b509495945050505050565b6001600160a01b03888116825260e0602080840182905289519184018290526000928a820192909190610100860190855b81811015612aca578551851683529483019491830191600101612aac565b50508581036040870152612ade818c612a40565b93505050508281036060840152612af58188612a40565b6001600160a01b0387166080850152905082810360a0840152612b1881866127e6565b915050612b2b60c083018461ffff169052565b98975050505050505050565b60008251612b498184602087016127ba565b9190910192915050565b602081526000611bad60208301846127e656fea2646970667358221220917bf956bb8460aa2d4a0c88d82998b2c352277426c524d8addf41afd5de8a1264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "Integrates with AAVE V3 flashLoans",
        "params": {
          "amounts": "Uint array with one element corresponding to the amount of the rebalanced asset",
          "assets": "Address array with one element corresponding to the address of the reblanced asset",
          "initiator": "Initiator of the flashloan; can only be MIMOProxy owner",
          "params": "Bytes sent by this contract containing MIMOProxy owner, RebalanceData struct and SwapData struct",
          "premiums": "Uint array with one element corresponding to the flashLoan fees"
        },
        "returns": {
          "_0": "True if success and False if not"
        }
      },
      "getManagedVault(uint256)": {
        "params": {
          "vaultId": "Vault id of the queried vault"
        },
        "returns": {
          "_0": "ManagedVault struct of a specific vault id"
        }
      },
      "getManager(address)": {
        "params": {
          "manager": "Manager address"
        },
        "returns": {
          "_0": "Bool value indicating if an address is allowed to manage user vaults or not"
        }
      },
      "getOperationTracker(uint256)": {
        "params": {
          "vaultId": "Vault id of the queried vault"
        },
        "returns": {
          "_0": "Timestamp of the last performed operation"
        }
      },
      "rebalance((address,address,uint256),(address,uint256,uint256),(uint256,bytes))": {
        "details": "Can only be called once a day by the manager selected by the MIMOProxy ownerReverts if operation results in vault value change above allowed variation or in vault ratio lower than min ratioNonReentrant to avoid exploits on what happens between before and after rebalance checks",
        "params": {
          "flData": "Flashloan data struct containing flashloan parameters",
          "rbData": "RebalanceData struct containing rebalance operation parameters",
          "swapData": "SwapData struct containing aggegator swap parameters"
        }
      },
      "setManagement(uint256,(bool,address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Can only be called by vault owner and can only appoint whitelisting managers as manger",
        "params": {
          "mgtParams": "ManagedVault struct containing all management parameters",
          "vaultId": "Vault id of the vault to be put under management"
        }
      },
      "setManager(address,bool)": {
        "details": "Can only be called by protocol manager",
        "params": {
          "isManager": "Bool value indicating if an address is allowed to manage user vaults or not",
          "manager": "Manager address"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "notice": "Routes a call from a flashloan pool to a leverage or rebalance operation"
      },
      "rebalance((address,address,uint256),(address,uint256,uint256),(uint256,bytes))": {
        "notice": "Perform a rebalance on a vault by an appointed whitelisted manager on behalf of vault ownerVault must have been created though a MIMOProxy"
      },
      "setManagement(uint256,(bool,address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Sets a vault management parameters"
      },
      "setManager(address,bool)": {
        "notice": "Whitelists or removes a manager"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9731,
        "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9733,
        "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3065,
        "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5581,
        "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
        "label": "_managedVaults",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(ManagedVault)6508_storage)"
      },
      {
        "astId": 5585,
        "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
        "label": "_operationTracker",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5589,
        "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
        "label": "_managers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1422,
        "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ManagedVault)6508_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMIMOManagedAction.ManagedVault)",
        "numberOfBytes": "32",
        "value": "t_struct(ManagedVault)6508_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ManagedVault)6508_storage": {
        "encoding": "inplace",
        "label": "struct IMIMOManagedAction.ManagedVault",
        "members": [
          {
            "astId": 6495,
            "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
            "label": "isManaged",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6497,
            "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
            "label": "manager",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6499,
            "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
            "label": "allowedVariation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6501,
            "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
            "label": "minRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6503,
            "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
            "label": "fixedFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6505,
            "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
            "label": "varFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6507,
            "contract": "contracts/actions/managed/MIMOManagedRebalance.sol:MIMOManagedRebalance",
            "label": "mcrBuffer",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}