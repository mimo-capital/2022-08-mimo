{
  "address": "0xE84eefb06a5fb49AeA53104A68DeC4Cbb4F5eD9f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVaultsCore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IVaultsDataProvider",
          "name": "_vaultsData",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_stablex",
          "type": "address"
        },
        {
          "internalType": "contract IMIMOProxyFactory",
          "name": "_proxyFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CANNOT_SET_TO_ADDRESS_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EXECUTION_REVERTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PAUSED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract IVaultsCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "depositAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "depositETHAndBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyFactory",
      "outputs": [
        {
          "internalType": "contract IMIMOProxyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablex",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultsData",
      "outputs": [
        {
          "internalType": "contract IVaultsDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9376418083f163698ab9a87e8dddf4feebbb89c55fcc92920b5f24b11e3f8f5b",
  "receipt": {
    "to": null,
    "from": "0x52004FfDf72fb793d5128c9F96d631F8770e2DaC",
    "contractAddress": "0xE84eefb06a5fb49AeA53104A68DeC4Cbb4F5eD9f",
    "transactionIndex": 28,
    "gasUsed": "1458385",
    "logsBloom": "0x
    "blockHash": "0xdf325832ca8e6e010bfd47dc78606527f8b6b978633d3ffccd09fd01634dfe09",
    "transactionHash": "0x9376418083f163698ab9a87e8dddf4feebbb89c55fcc92920b5f24b11e3f8f5b",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 32887793,
        "transactionHash": "0x9376418083f163698ab9a87e8dddf4feebbb89c55fcc92920b5f24b11e3f8f5b",
        "address": "0xE84eefb06a5fb49AeA53104A68DeC4Cbb4F5eD9f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000052004ffdf72fb793d5128c9f96d631f8770e2dac"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0xdf325832ca8e6e010bfd47dc78606527f8b6b978633d3ffccd09fd01634dfe09"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 32887793,
        "transactionHash": "0x9376418083f163698ab9a87e8dddf4feebbb89c55fcc92920b5f24b11e3f8f5b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000052004ffdf72fb793d5128c9f96d631f8770e2dac",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003089c6bbfbd8a3000000000000000000000000000000000000000000000000087562b6ceffa2c00000000000000000000000000000000000000000000000035cc34283d02282cf7000000000000000000000000000000000000000000000000844d8f01303ca1d0000000000000000000000000000000000000000000000035cf3cc4a8c1e5b727",
        "logIndex": 133,
        "blockHash": "0xdf325832ca8e6e010bfd47dc78606527f8b6b978633d3ffccd09fd01634dfe09"
      }
    ],
    "blockNumber": 32887793,
    "cumulativeGasUsed": "11431137",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03175c19CB1d30Fa6060331A9ec181e04CAC6aB0",
    "0xDe1996189EE1857d79f1F2bebe2A4a2B200bCb44",
    "0xE2Aa7db6dA1dAE97C5f5C6914d285fBfCC32A128",
    "0x44e3c7B3994ce6C29a4E64A16ff998DAb5f996a3"
  ],
  "numDeployments": 2,
  "solcInputHash": "ec9355dab2370e38f7b8dfd09e7fcbd5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVaultsCore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IVaultsDataProvider\",\"name\":\"_vaultsData\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stablex\",\"type\":\"address\"},{\"internalType\":\"contract IMIMOProxyFactory\",\"name\":\"_proxyFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CANNOT_SET_TO_ADDRESS_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EXECUTION_REVERTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PAUSED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract IVaultsCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"depositETHAndBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactory\",\"outputs\":[{\"internalType\":\"contract IMIMOProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablex\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultsData\",\"outputs\":[{\"internalType\":\"contract IVaultsDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/actions/MIMOVaultActions.sol\":\"MIMOVaultActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/actions/MIMOPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IMIMOPausable.sol\\\";\\nimport \\\"../libraries/BoringOwnable.sol\\\";\\nimport { Errors } from \\\"../libraries/Errors.sol\\\";\\n\\ncontract MIMOPausable is IMIMOPausable, BoringOwnable {\\n  bool private _paused;\\n\\n  modifier whenNotPaused() virtual {\\n    if (_paused) {\\n      revert Errors.PAUSED();\\n    }\\n    _;\\n  }\\n\\n  function pause() external override onlyOwner {\\n    _paused = true;\\n  }\\n\\n  function unpause() external override onlyOwner {\\n    _paused = false;\\n  }\\n\\n  function paused() external view override returns (bool) {\\n    return _paused;\\n  }\\n}\\n\",\"keccak256\":\"0x370bd8c063cb4aa7787545ce03197d6cd049c0c825764ce29601bb3eb2694070\",\"license\":\"MIT\"},\"contracts/actions/MIMOVaultActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./MIMOPausable.sol\\\";\\nimport \\\"./interfaces/IMIMOVaultActions.sol\\\";\\nimport { Errors } from \\\"../libraries/Errors.sol\\\";\\nimport \\\"../core/interfaces/IVaultsCore.sol\\\";\\nimport \\\"../core/interfaces/IVaultsDataProvider.sol\\\";\\nimport \\\"../proxy/interfaces/IMIMOProxyFactory.sol\\\";\\n\\ncontract MIMOVaultActions is MIMOPausable, IMIMOVaultActions {\\n  using SafeERC20 for IERC20;\\n\\n  address public immutable override contractAddress;\\n\\n  IVaultsCore public immutable override core;\\n  IVaultsDataProvider public immutable override vaultsData;\\n  IERC20 public immutable override stablex;\\n  IMIMOProxyFactory public immutable override proxyFactory;\\n\\n  modifier whenNotPaused() override {\\n    if (MIMOPausable(contractAddress).paused()) {\\n      revert Errors.PAUSED();\\n    }\\n    _;\\n  }\\n\\n  constructor(\\n    IVaultsCore _core,\\n    IVaultsDataProvider _vaultsData,\\n    IERC20 _stablex,\\n    IMIMOProxyFactory _proxyFactory\\n  ) {\\n    if (\\n      address(_core) == address(0) ||\\n      address(_vaultsData) == address(0) ||\\n      address(_stablex) == address(0) ||\\n      address(_proxyFactory) == address(0)\\n    ) {\\n      revert Errors.CANNOT_SET_TO_ADDRESS_ZERO();\\n    }\\n    core = _core;\\n    vaultsData = _vaultsData;\\n    stablex = _stablex;\\n    proxyFactory = _proxyFactory;\\n    contractAddress = address(this);\\n  }\\n\\n  function deposit(IERC20 collateral, uint256 amount) external override whenNotPaused {\\n    collateral.safeTransferFrom(msg.sender, address(this), amount);\\n    collateral.safeIncreaseAllowance(address(core), amount);\\n    core.deposit(address(collateral), amount);\\n  }\\n\\n  function depositETH() external payable override whenNotPaused {\\n    core.depositETH{ value: msg.value }();\\n  }\\n\\n  function depositAndBorrow(\\n    IERC20 collateral,\\n    uint256 depositAmount,\\n    uint256 borrowAmount\\n  ) external override whenNotPaused {\\n    IVaultsCore core_ = core;\\n    collateral.safeTransferFrom(msg.sender, address(this), depositAmount);\\n    collateral.safeIncreaseAllowance(address(core_), depositAmount);\\n    core_.depositAndBorrow(address(collateral), depositAmount, borrowAmount);\\n    stablex.safeTransfer(proxyFactory.getProxyState(address(this)).owner, borrowAmount);\\n  }\\n\\n  function depositETHAndBorrow(uint256 borrowAmount) external payable override whenNotPaused {\\n    core.depositETHAndBorrow{ value: msg.value }(borrowAmount);\\n    stablex.safeTransfer(proxyFactory.getProxyState(address(this)).owner, borrowAmount);\\n  }\\n\\n  function withdraw(uint256 vaultId, uint256 amount) external override whenNotPaused {\\n    core.withdraw(vaultId, amount);\\n    IERC20(vaultsData.vaultCollateralType(vaultId)).safeTransfer(\\n      proxyFactory.getProxyState(address(this)).owner,\\n      amount\\n    );\\n  }\\n\\n  function withdrawETH(uint256 vaultId, uint256 amount) external override whenNotPaused {\\n    core.withdrawETH(vaultId, amount);\\n    (bool success, bytes memory response) = proxyFactory.getProxyState(address(this)).owner.call{ value: amount }(\\\"\\\");\\n    if (!success) {\\n      if (response.length > 0) {\\n        assembly {\\n          let returndata_size := mload(response)\\n          revert(add(32, response), returndata_size)\\n        }\\n      } else {\\n        revert Errors.EXECUTION_REVERTED();\\n      }\\n    }\\n  }\\n\\n  function borrow(uint256 vaultId, uint256 amount) external override whenNotPaused {\\n    core.borrow(vaultId, amount);\\n    stablex.safeTransfer(proxyFactory.getProxyState(address(this)).owner, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x1c014b0089f200e201c5cbd2c2fac9c6a6f658631c812b64363818f88a6044f5\",\"license\":\"MIT\"},\"contracts/actions/interfaces/IMIMOPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IMIMOPausable {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe08a641bbaf5cae381672645f18f068aafa7e13deed1e09280fce46f2642bdf3\",\"license\":\"MIT\"},\"contracts/actions/interfaces/IMIMOVaultActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../core/interfaces/IVaultsCore.sol\\\";\\nimport \\\"../../core/interfaces/IVaultsDataProvider.sol\\\";\\nimport \\\"../../proxy/interfaces/IMIMOProxyFactory.sol\\\";\\n\\ninterface IMIMOVaultActions {\\n  function deposit(IERC20 collateral, uint256 amount) external;\\n\\n  function depositETH() external payable;\\n\\n  function depositAndBorrow(\\n    IERC20 collateral,\\n    uint256 depositAmount,\\n    uint256 borrowAmount\\n  ) external;\\n\\n  function depositETHAndBorrow(uint256 borrowAmount) external payable;\\n\\n  function withdraw(uint256 vaultId, uint256 amount) external;\\n\\n  function withdrawETH(uint256 vaultId, uint256 amount) external;\\n\\n  function borrow(uint256 vaultId, uint256 amount) external;\\n\\n  function core() external view returns (IVaultsCore);\\n\\n  function vaultsData() external view returns (IVaultsDataProvider);\\n\\n  function stablex() external view returns (IERC20);\\n\\n  function contractAddress() external view returns (address);\\n\\n  function proxyFactory() external view returns (IMIMOProxyFactory);\\n}\\n\",\"keccak256\":\"0x8b07a979664feec8452c730975a466bf0b63d7af1264324cdfefe4fe0580b83b\",\"license\":\"MIT\"},\"contracts/core/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xc807bfa97bec719eeee99b97da91046aa92dfd24b9ae85923b0e81d713f04e4c\",\"license\":\"UNLICENSED\"},\"contracts/core/governance/interfaces/IGovernanceAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorAlpha.sol\\\";\\nimport \\\"./ITimelock.sol\\\";\\nimport \\\"./IVotingEscrow.sol\\\";\\nimport \\\"../../interfaces/IAccessController.sol\\\";\\nimport \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IMIMO.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IDebtNotifier.sol\\\";\\n\\ninterface IGovernanceAddressProvider {\\n  function setParallelAddressProvider(IAddressProvider _parallel) external;\\n\\n  function setMIMO(IMIMO _mimo) external;\\n\\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\\n\\n  function setGovernorAlpha(IGovernorAlpha _governorAlpha) external;\\n\\n  function setTimelock(ITimelock _timelock) external;\\n\\n  function setVotingEscrow(IVotingEscrow _votingEscrow) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function parallel() external view returns (IAddressProvider);\\n\\n  function mimo() external view returns (IMIMO);\\n\\n  function debtNotifier() external view returns (IDebtNotifier);\\n\\n  function governorAlpha() external view returns (IGovernorAlpha);\\n\\n  function timelock() external view returns (ITimelock);\\n\\n  function votingEscrow() external view returns (IVotingEscrow);\\n}\\n\",\"keccak256\":\"0x27689f6dd750c56338ecdf975cd112b4384cdd0dd7b9b6d49b2a5c8e281801d6\",\"license\":\"MIT\"},\"contracts/core/governance/interfaces/IGovernorAlpha.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\ninterface IGovernorAlpha {\\n  /// @notice Possible states that a proposal may be in\\n  enum ProposalState { Active, Canceled, Defeated, Succeeded, Queued, Expired, Executed }\\n\\n  struct Proposal {\\n    // Unique id for looking up a proposal\\n    uint256 id;\\n    // Creator of the proposal\\n    address proposer;\\n    // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n    uint256 eta;\\n    // the ordered list of target addresses for calls to be made\\n    address[] targets;\\n    // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    uint256[] values;\\n    // The ordered list of function signatures to be called\\n    string[] signatures;\\n    // The ordered list of calldata to be passed to each call\\n    bytes[] calldatas;\\n    // The timestamp at which voting begins: holders must delegate their votes prior to this timestamp\\n    uint256 startTime;\\n    // The timestamp at which voting ends: votes must be cast prior to this timestamp\\n    uint256 endTime;\\n    // Current number of votes in favor of this proposal\\n    uint256 forVotes;\\n    // Current number of votes in opposition to this proposal\\n    uint256 againstVotes;\\n    // Flag marking whether the proposal has been canceled\\n    bool canceled;\\n    // Flag marking whether the proposal has been executed\\n    bool executed;\\n    // Receipts of ballots for the entire set of voters\\n    mapping(address => Receipt) receipts;\\n  }\\n\\n  /// @notice Ballot receipt record for a voter\\n  struct Receipt {\\n    // Whether or not a vote has been cast\\n    bool hasVoted;\\n    // Whether or not the voter supports the proposal\\n    bool support;\\n    // The number of votes the voter had, which were cast\\n    uint256 votes;\\n  }\\n\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreated(\\n    uint256 id,\\n    address proposer,\\n    address[] targets,\\n    uint256[] values,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    uint256 startTime,\\n    uint256 endTime,\\n    string description\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\\n\\n  /// @notice An event emitted when a proposal has been canceled\\n  event ProposalCanceled(uint256 id);\\n\\n  /// @notice An event emitted when a proposal has been queued in the Timelock\\n  event ProposalQueued(uint256 id, uint256 eta);\\n\\n  /// @notice An event emitted when a proposal has been executed in the Timelock\\n  event ProposalExecuted(uint256 id);\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    string[] memory signatures,\\n    bytes[] memory calldatas,\\n    string memory description,\\n    uint256 endTime\\n  ) external returns (uint256);\\n\\n  function queue(uint256 proposalId) external;\\n\\n  function execute(uint256 proposalId) external payable;\\n\\n  function cancel(uint256 proposalId) external;\\n\\n  function castVote(uint256 proposalId, bool support) external;\\n\\n  function getActions(uint256 proposalId)\\n    external\\n    view\\n    returns (\\n      address[] memory targets,\\n      uint256[] memory values,\\n      string[] memory signatures,\\n      bytes[] memory calldatas\\n    );\\n\\n  function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory);\\n\\n  function state(uint256 proposalId) external view returns (ProposalState);\\n\\n  function quorumVotes() external view returns (uint256);\\n\\n  function proposalThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0028d4aa7650ec438dcb87baa5e7dae8fb6e8dc4a106b20d7a2c457c1723aff9\",\"license\":\"MIT\"},\"contracts/core/governance/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.0;\\n\\ninterface ITimelock {\\n  event NewAdmin(address indexed newAdmin);\\n  event NewPendingAdmin(address indexed newPendingAdmin);\\n  event NewDelay(uint256 indexed newDelay);\\n  event CancelTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n  event ExecuteTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n  event QueueTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n\\n  function acceptAdmin() external;\\n\\n  function queueTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external returns (bytes32);\\n\\n  function cancelTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external;\\n\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external payable returns (bytes memory);\\n\\n  function delay() external view returns (uint256);\\n\\n  function GRACE_PERIOD() external view returns (uint256);\\n\\n  function queuedTransactions(bytes32 hash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa83584f0eb01219738de7c5051c5e0b1f3ab692ad71ae6114e04499849876515\",\"license\":\"BSD-3-Clause\"},\"contracts/core/governance/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IGenericMiner.sol\\\";\\n\\ninterface IVotingEscrow {\\n  enum LockAction {\\n    CREATE_LOCK,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_LOCK_TIME\\n  }\\n\\n  struct LockedBalance {\\n    uint256 amount;\\n    uint256 end;\\n  }\\n\\n  /** Shared Events */\\n  event Deposit(address indexed provider, uint256 value, uint256 locktime, LockAction indexed action, uint256 ts);\\n  event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n  event Expired();\\n\\n  function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n  function increaseLockAmount(uint256 _value) external;\\n\\n  function increaseLockLength(uint256 _unlockTime) external;\\n\\n  function withdraw() external;\\n\\n  function expireContract() external;\\n\\n  function setMiner(IGenericMiner _miner) external;\\n\\n  function setMinimumLockTime(uint256 _minimumLockTime) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function balanceOf(address _owner) external view returns (uint256);\\n\\n  function balanceOfAt(address _owner, uint256 _blockTime) external view returns (uint256);\\n\\n  function stakingToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xb797387e50447a9d533ee6c81b047403b1446356b9935af3e629ddb620f3c171\",\"license\":\"AGPL-3.0\"},\"contracts/core/interfaces/IAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAccessController {\\n  event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  function grantRole(bytes32 role, address account) external;\\n\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  function MINTER_ROLE() external view returns (bytes32);\\n\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n  function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xeed0fe293b992de84f560bf03d2cab80ac98aa3fa93fd98368f844dc1a7e30d2\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessController.sol\\\";\\nimport \\\"./IConfigProvider.sol\\\";\\nimport \\\"./ISTABLEX.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"./IRatesManager.sol\\\";\\nimport \\\"./ILiquidationManager.sol\\\";\\nimport \\\"./IVaultsCore.sol\\\";\\nimport \\\"./IVaultsDataProvider.sol\\\";\\nimport \\\"./IFeeDistributor.sol\\\";\\n\\ninterface IAddressProvider {\\n  function setAccessController(IAccessController _controller) external;\\n\\n  function setConfigProvider(IConfigProvider _config) external;\\n\\n  function setVaultsCore(IVaultsCore _core) external;\\n\\n  function setStableX(ISTABLEX _stablex) external;\\n\\n  function setRatesManager(IRatesManager _ratesManager) external;\\n\\n  function setPriceFeed(IPriceFeed _priceFeed) external;\\n\\n  function setLiquidationManager(ILiquidationManager _liquidationManager) external;\\n\\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\\n\\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function config() external view returns (IConfigProvider);\\n\\n  function core() external view returns (IVaultsCore);\\n\\n  function stablex() external view returns (ISTABLEX);\\n\\n  function ratesManager() external view returns (IRatesManager);\\n\\n  function priceFeed() external view returns (IPriceFeed);\\n\\n  function liquidationManager() external view returns (ILiquidationManager);\\n\\n  function vaultsData() external view returns (IVaultsDataProvider);\\n\\n  function feeDistributor() external view returns (IFeeDistributor);\\n}\\n\",\"keccak256\":\"0xb0d8a3c59ca3637376da8acf8e5f77297e2f312439cb77d21805dfdea481ea3e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IConfigProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IConfigProvider {\\n  struct CollateralConfig {\\n    address collateralType;\\n    uint256 debtLimit;\\n    uint256 liquidationRatio;\\n    uint256 minCollateralRatio;\\n    uint256 borrowRate;\\n    uint256 originationFee;\\n    uint256 liquidationBonus;\\n    uint256 liquidationFee;\\n  }\\n\\n  event CollateralUpdated(\\n    address indexed collateralType,\\n    uint256 debtLimit,\\n    uint256 liquidationRatio,\\n    uint256 minCollateralRatio,\\n    uint256 borrowRate,\\n    uint256 originationFee,\\n    uint256 liquidationBonus,\\n    uint256 liquidationFee\\n  );\\n  event CollateralRemoved(address indexed collateralType);\\n\\n  function setCollateralConfig(\\n    address _collateralType,\\n    uint256 _debtLimit,\\n    uint256 _liquidationRatio,\\n    uint256 _minCollateralRatio,\\n    uint256 _borrowRate,\\n    uint256 _originationFee,\\n    uint256 _liquidationBonus,\\n    uint256 _liquidationFee\\n  ) external;\\n\\n  function removeCollateral(address _collateralType) external;\\n\\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\\n\\n  function setCollateralLiquidationRatio(address _collateralType, uint256 _liquidationRatio) external;\\n\\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\\n\\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\\n\\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\\n\\n  function setCollateralLiquidationBonus(address _collateralType, uint256 _liquidationBonus) external;\\n\\n  function setCollateralLiquidationFee(address _collateralType, uint256 _liquidationFee) external;\\n\\n  function setMinVotingPeriod(uint256 _minVotingPeriod) external;\\n\\n  function setMaxVotingPeriod(uint256 _maxVotingPeriod) external;\\n\\n  function setVotingQuorum(uint256 _votingQuorum) external;\\n\\n  function setProposalThreshold(uint256 _proposalThreshold) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\\n\\n  function collateralIds(address _collateralType) external view returns (uint256);\\n\\n  function numCollateralConfigs() external view returns (uint256);\\n\\n  function minVotingPeriod() external view returns (uint256);\\n\\n  function maxVotingPeriod() external view returns (uint256);\\n\\n  function votingQuorum() external view returns (uint256);\\n\\n  function proposalThreshold() external view returns (uint256);\\n\\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\\n\\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationBonus(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationFee(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d5bc200560b8cb52403fe7c0bba7c154d21593ff9b38c2bd2d7122f91f74809\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IFeeDistributor {\\n  event PayeeAdded(address indexed account, uint256 shares);\\n  event FeeReleased(uint256 income, uint256 releasedAt);\\n\\n  function release() external;\\n\\n  function changePayees(address[] memory _payees, uint256[] memory _shares) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function lastReleasedAt() external view returns (uint256);\\n\\n  function getPayees() external view returns (address[] memory);\\n\\n  function totalShares() external view returns (uint256);\\n\\n  function shares(address payee) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73c206a45e6e4b95f8db5f9c2a415fc50ff37d329b77bed4d1d1fd60381cfb93\",\"license\":\"MIT\"},\"contracts/core/interfaces/ILiquidationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface ILiquidationManager {\\n  function a() external view returns (IAddressProvider);\\n\\n  function calculateHealthFactor(\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt,\\n    uint256 _minRatio\\n  ) external view returns (uint256 healthFactor);\\n\\n  function liquidationBonus(address _collateralType, uint256 _amount) external view returns (uint256 bonus);\\n\\n  function applyLiquidationDiscount(address _collateralType, uint256 _amount)\\n    external\\n    view\\n    returns (uint256 discountedAmount);\\n\\n  function isHealthy(\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt,\\n    uint256 _minRatio\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47b143c0e66c91dde89f6536bbfe2103a4fdf2227587495729839998707fe694\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IPriceFeed {\\n  event OracleUpdated(address indexed asset, address oracle, address sender);\\n  event EurOracleUpdated(address oracle, address sender);\\n\\n  function setAssetOracle(address _asset, address _oracle) external;\\n\\n  function setEurOracle(address _oracle) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function assetOracles(address _asset) external view returns (AggregatorV3Interface);\\n\\n  function eurOracle() external view returns (AggregatorV3Interface);\\n\\n  function getAssetPrice(address _asset) external view returns (uint256);\\n\\n  function convertFrom(address _asset, uint256 _amount) external view returns (uint256);\\n\\n  function convertTo(address _asset, uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fca36e3d871f5e03fffaed8cd0badeaf36adf6e2b0b8911e6d84331b504a223\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRatesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IRatesManager {\\n  function a() external view returns (IAddressProvider);\\n\\n  //current annualized borrow rate\\n  function annualizedBorrowRate(uint256 _currentBorrowRate) external pure returns (uint256);\\n\\n  //uses current cumulative rate to calculate totalDebt based on baseDebt at time T0\\n  function calculateDebt(uint256 _baseDebt, uint256 _cumulativeRate) external pure returns (uint256);\\n\\n  //uses current cumulative rate to calculate baseDebt at time T0\\n  function calculateBaseDebt(uint256 _debt, uint256 _cumulativeRate) external pure returns (uint256);\\n\\n  //calculate a new cumulative rate\\n  function calculateCumulativeRate(\\n    uint256 _borrowRate,\\n    uint256 _cumulativeRate,\\n    uint256 _timeElapsed\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ce92f95c5919b1b51c8fc29382861a383bdbbe9cf4c1ce4ca0ca7cd3c09ae31\",\"license\":\"MIT\"},\"contracts/core/interfaces/ISTABLEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface ISTABLEX is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function a() external view returns (IAddressProvider);\\n}\\n\",\"keccak256\":\"0x236fd5aff8fa5643e0fe7e7d097874ecc69ae946172ff6422d434d8ff7532e29\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultsCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../interfaces/IVaultsCoreState.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../liquidityMining/interfaces/IDebtNotifier.sol\\\";\\n\\ninterface IVaultsCore {\\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Liquidated(\\n    uint256 indexed vaultId,\\n    uint256 debtRepaid,\\n    uint256 collateralLiquidated,\\n    address indexed owner,\\n    address indexed sender\\n  );\\n\\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\\n\\n  function deposit(address _collateralType, uint256 _amount) external;\\n\\n  function depositETH() external payable;\\n\\n  function depositByVaultId(uint256 _vaultId, uint256 _amount) external;\\n\\n  function depositETHByVaultId(uint256 _vaultId) external payable;\\n\\n  function depositAndBorrow(\\n    address _collateralType,\\n    uint256 _depositAmount,\\n    uint256 _borrowAmount\\n  ) external;\\n\\n  function depositETHAndBorrow(uint256 _borrowAmount) external payable;\\n\\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\\n\\n  function withdrawETH(uint256 _vaultId, uint256 _amount) external;\\n\\n  function borrow(uint256 _vaultId, uint256 _amount) external;\\n\\n  function repayAll(uint256 _vaultId) external;\\n\\n  function repay(uint256 _vaultId, uint256 _amount) external;\\n\\n  function liquidate(uint256 _vaultId) external;\\n\\n  function liquidatePartial(uint256 _vaultId, uint256 _amount) external;\\n\\n  function upgrade(address payable _newVaultsCore) external;\\n\\n  function acceptUpgrade(address payable _oldVaultsCore) external;\\n\\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\\n\\n  //Read only\\n  function a() external view returns (IAddressProvider);\\n\\n  function WETH() external view returns (IWETH);\\n\\n  function debtNotifier() external view returns (IDebtNotifier);\\n\\n  function state() external view returns (IVaultsCoreState);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0732c2a47b48729aa454c8ff6fe9081e8018967cc797ddce20785d3455610703\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultsCoreState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\nimport \\\"./IAddressProvider.sol\\\";\\nimport \\\"../v1/interfaces/IVaultsCoreV1.sol\\\";\\n\\ninterface IVaultsCoreState {\\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\\n\\n  function initializeRates(address _collateralType) external;\\n\\n  function refresh() external;\\n\\n  function refreshCollateral(address collateralType) external;\\n\\n  function syncState(IVaultsCoreState _stateAddress) external;\\n\\n  function syncStateFromV1(IVaultsCoreV1 _core) external;\\n\\n  //Read only\\n  function a() external view returns (IAddressProvider);\\n\\n  function availableIncome() external view returns (uint256);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n\\n  function lastRefresh(address _collateralType) external view returns (uint256);\\n\\n  function synced() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x09444b73561a89e15bb56f0fe38fe46926a232dc9c13eea652a635982e08aabb\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultsDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IVaultsDataProvider {\\n  struct Vault {\\n    // borrowedType support USDX / PAR\\n    address collateralType;\\n    address owner;\\n    uint256 collateralBalance;\\n    uint256 baseDebt;\\n    uint256 createdAt;\\n  }\\n\\n  //Write\\n  function createVault(address _collateralType, address _owner) external returns (uint256);\\n\\n  function setCollateralBalance(uint256 _id, uint256 _balance) external;\\n\\n  function setBaseDebt(uint256 _id, uint256 _newBaseDebt) external;\\n\\n  // Read\\n  function a() external view returns (IAddressProvider);\\n\\n  function baseDebt(address _collateralType) external view returns (uint256);\\n\\n  function vaultCount() external view returns (uint256);\\n\\n  function vaults(uint256 _id) external view returns (Vault memory);\\n\\n  function vaultOwner(uint256 _id) external view returns (address);\\n\\n  function vaultCollateralType(uint256 _id) external view returns (address);\\n\\n  function vaultCollateralBalance(uint256 _id) external view returns (uint256);\\n\\n  function vaultBaseDebt(uint256 _id) external view returns (uint256);\\n\\n  function vaultId(address _collateralType, address _owner) external view returns (uint256);\\n\\n  function vaultExists(uint256 _id) external view returns (bool);\\n\\n  function vaultDebt(uint256 _vaultId) external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function collateralDebt(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0848fb3f781b7f45b5e798b9137a412c14b539be9f8af485f1c8d3261b828127\",\"license\":\"MIT\"},\"contracts/core/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function withdraw(uint256 wad) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x77e05f1d05c608be39e349a0ede3c601f0dfca2c5391db396399865ea09f978d\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/IDebtNotifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../governance/interfaces/IGovernanceAddressProvider.sol\\\";\\nimport \\\"./ISupplyMiner.sol\\\";\\n\\ninterface IDebtNotifier {\\n    function debtChanged(uint256 _vaultId) external;\\n\\n    function setCollateralSupplyMiner(\\n        address collateral,\\n        ISupplyMiner supplyMiner\\n    ) external;\\n\\n    function a() external view returns (IGovernanceAddressProvider);\\n\\n    function collateralSupplyMinerMapping(address collateral)\\n        external\\n        view\\n        returns (ISupplyMiner);\\n}\\n\",\"keccak256\":\"0xebc8abcf2d1ddeb76fd14ddd61fdda7a82436dddaa91d205b949922cfeab6b55\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/IGenericMiner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../governance/interfaces/IGovernanceAddressProvider.sol\\\";\\n\\ninterface IGenericMiner {\\n  struct UserInfo {\\n    uint256 stake;\\n    uint256 accAmountPerShare; // User's accAmountPerShare\\n  }\\n\\n  /// @dev This emit when a users' productivity has changed\\n  /// It emits with the user's address and the the value after the change.\\n  event StakeIncreased(address indexed user, uint256 stake);\\n\\n  /// @dev This emit when a users' productivity has changed\\n  /// It emits with the user's address and the the value after the change.\\n  event StakeDecreased(address indexed user, uint256 stake);\\n\\n  function releaseMIMO(address _user) external;\\n\\n  function a() external view returns (IGovernanceAddressProvider);\\n\\n  function stake(address _user) external view returns (uint256);\\n\\n  function pendingMIMO(address _user) external view returns (uint256);\\n\\n  function totalStake() external view returns (uint256);\\n\\n  function userInfo(address _user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0x41a4ed19296dce5141bb394e8a030951d780d356084a6b2327cfebdafff376f1\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/IMIMO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMIMO is IERC20 {\\n  function burn(address account, uint256 amount) external;\\n\\n  function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9c93054d9928423a32c603eba23c7dd1cf847f4ce0b49826002acb2a38ba8b6a\",\"license\":\"MIT\"},\"contracts/core/liquidityMining/interfaces/ISupplyMiner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\ninterface ISupplyMiner {\\n  function baseDebtChanged(address user, uint256 newBaseDebt) external;\\n}\\n\",\"keccak256\":\"0xd74c677a4f9cba99f9aa175bc953460ad01bb767d198de6344fd4c1c0a9878c4\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/IAddressProviderV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IConfigProviderV1.sol\\\";\\nimport \\\"./ILiquidationManagerV1.sol\\\";\\nimport \\\"./IVaultsCoreV1.sol\\\";\\nimport \\\"../../interfaces/IVaultsCore.sol\\\";\\nimport \\\"../../interfaces/IAccessController.sol\\\";\\nimport \\\"../../interfaces/ISTABLEX.sol\\\";\\nimport \\\"../../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../../interfaces/IRatesManager.sol\\\";\\nimport \\\"../../interfaces/IVaultsDataProvider.sol\\\";\\nimport \\\"../../interfaces/IFeeDistributor.sol\\\";\\n\\ninterface IAddressProviderV1 {\\n  function setAccessController(IAccessController _controller) external;\\n\\n  function setConfigProvider(IConfigProviderV1 _config) external;\\n\\n  function setVaultsCore(IVaultsCoreV1 _core) external;\\n\\n  function setStableX(ISTABLEX _stablex) external;\\n\\n  function setRatesManager(IRatesManager _ratesManager) external;\\n\\n  function setPriceFeed(IPriceFeed _priceFeed) external;\\n\\n  function setLiquidationManager(ILiquidationManagerV1 _liquidationManager) external;\\n\\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\\n\\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function config() external view returns (IConfigProviderV1);\\n\\n  function core() external view returns (IVaultsCoreV1);\\n\\n  function stablex() external view returns (ISTABLEX);\\n\\n  function ratesManager() external view returns (IRatesManager);\\n\\n  function priceFeed() external view returns (IPriceFeed);\\n\\n  function liquidationManager() external view returns (ILiquidationManagerV1);\\n\\n  function vaultsData() external view returns (IVaultsDataProvider);\\n\\n  function feeDistributor() external view returns (IFeeDistributor);\\n}\\n\",\"keccak256\":\"0x90c7edf8c7e2c6a911eb1e5d97ea185a8a8d55530b10757710bced44aa1c29d7\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/IConfigProviderV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface IConfigProviderV1 {\\n  struct CollateralConfig {\\n    address collateralType;\\n    uint256 debtLimit;\\n    uint256 minCollateralRatio;\\n    uint256 borrowRate;\\n    uint256 originationFee;\\n  }\\n\\n  event CollateralUpdated(\\n    address indexed collateralType,\\n    uint256 debtLimit,\\n    uint256 minCollateralRatio,\\n    uint256 borrowRate,\\n    uint256 originationFee\\n  );\\n  event CollateralRemoved(address indexed collateralType);\\n\\n  function setCollateralConfig(\\n    address _collateralType,\\n    uint256 _debtLimit,\\n    uint256 _minCollateralRatio,\\n    uint256 _borrowRate,\\n    uint256 _originationFee\\n  ) external;\\n\\n  function removeCollateral(address _collateralType) external;\\n\\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\\n\\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\\n\\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\\n\\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\\n\\n  function setLiquidationBonus(uint256 _bonus) external;\\n\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\\n\\n  function collateralIds(address _collateralType) external view returns (uint256);\\n\\n  function numCollateralConfigs() external view returns (uint256);\\n\\n  function liquidationBonus() external view returns (uint256);\\n\\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\\n\\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\\n\\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x222bcabed1707aa5588c87f8049d6c0babba04d8460b8fb434a2639c2655199f\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/ILiquidationManagerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface ILiquidationManagerV1 {\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function calculateHealthFactor(\\n    address _collateralType,\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt\\n  ) external view returns (uint256 healthFactor);\\n\\n  function liquidationBonus(uint256 _amount) external view returns (uint256 bonus);\\n\\n  function applyLiquidationDiscount(uint256 _amount) external view returns (uint256 discountedAmount);\\n\\n  function isHealthy(\\n    address _collateralType,\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa1fa92ce5417c4375d94956c7d78bc5be5b122ae5726134f6e32bfa360b8e40\",\"license\":\"MIT\"},\"contracts/core/v1/interfaces/IVaultsCoreV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface IVaultsCoreV1 {\\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Liquidated(\\n    uint256 indexed vaultId,\\n    uint256 debtRepaid,\\n    uint256 collateralLiquidated,\\n    address indexed owner,\\n    address indexed sender\\n  );\\n\\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\\n\\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\\n\\n  function deposit(address _collateralType, uint256 _amount) external;\\n\\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\\n\\n  function withdrawAll(uint256 _vaultId) external;\\n\\n  function borrow(uint256 _vaultId, uint256 _amount) external;\\n\\n  function repayAll(uint256 _vaultId) external;\\n\\n  function repay(uint256 _vaultId, uint256 _amount) external;\\n\\n  function liquidate(uint256 _vaultId) external;\\n\\n  //Refresh\\n  function initializeRates(address _collateralType) external;\\n\\n  function refresh() external;\\n\\n  function refreshCollateral(address collateralType) external;\\n\\n  //upgrade\\n  function upgrade(address _newVaultsCore) external;\\n\\n  //Read only\\n\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function availableIncome() external view returns (uint256);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n\\n  function lastRefresh(address _collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a9f2c29b6c96ce9e3b036371762796d2530aff09be35a76ebbc9fffdd328bb0\",\"license\":\"MIT\"},\"contracts/libraries/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n  address public owner;\\n  address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice `owner` defaults to msg.sender on construction.\\n  constructor() {\\n    owner = msg.sender;\\n    emit OwnershipTransferred(address(0), msg.sender);\\n  }\\n\\n  /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n  /// Can only be invoked by the current `owner`.\\n  /// @param newOwner Address of the new owner.\\n  /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n  /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n  function transferOwnership(\\n    address newOwner,\\n    bool direct,\\n    bool renounce\\n  ) public onlyOwner {\\n    if (direct) {\\n      // Checks\\n      require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n      // Effects\\n      emit OwnershipTransferred(owner, newOwner);\\n      owner = newOwner;\\n      pendingOwner = address(0);\\n    } else {\\n      // Effects\\n      pendingOwner = newOwner;\\n    }\\n  }\\n\\n  /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n  function claimOwnership() public {\\n    address _pendingOwner = pendingOwner;\\n\\n    // Checks\\n    require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n    // Effects\\n    emit OwnershipTransferred(owner, _pendingOwner);\\n    owner = _pendingOwner;\\n    pendingOwner = address(0);\\n  }\\n\\n  /// @notice Only allows the `owner` to execute the function.\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2759927451e609747b0e08475d9b65e99d0e830e3afda1c2d2d8a248bc887b63\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\n\\n/**\\n    @title Errors library\\n    @author MIMO\\n    @notice Defines the error messages emtted by the different contracts of the MIMO protocol\\n */\\n\\nlibrary Errors {\\n  error CANNOT_SET_TO_ADDRESS_ZERO();\\n  error INITIATOR_NOT_AUTHORIZED(address actual, address expected);\\n  error CALLER_NOT_LENDING_POOL(address actual, address expected);\\n  error CANNOT_REPAY_FLASHLOAN();\\n  error INVALID_AGGREGATOR();\\n  error AGGREGATOR_CALL_FAILED();\\n  error EXECUTION_NOT_AUTHORIZED(address owner, address caller, address target, bytes4 selector);\\n  error EXECUTION_REVERTED();\\n  error NOT_OWNER(address owner, address caller);\\n  error OWNER_CHANGED(address originalOwner, address newOwner);\\n  error TARGET_INVALID(address target);\\n  error CALLER_NOT_VAULT_OWNER(address callerProxy, address vaultOwner);\\n  error CALLER_NOT_PROTOCOL_MANAGER();\\n  error MANAGER_NOT_LISTED();\\n  error VAULT_NOT_UNDER_MANAGEMENT();\\n  error CALLER_NOT_SELECTED_MANAGER();\\n  error PROXY_ALREADY_EXISTS(address owner);\\n  error MAX_OPERATIONS_REACHED();\\n  error MINT_AMOUNT_GREATER_THAN_VAULT_DEBT();\\n  error VAULT_VALUE_CHANGE_TOO_HIGH();\\n  error FINAL_VAULT_RATIO_TOO_LOW(uint256 minRatio, uint256 actualRatio);\\n  error VAULT_NOT_AUTOMATED();\\n  error VAULT_TRIGGER_RATIO_NOT_REACHED(uint256 actual, uint256 expected);\\n  error TARGETS_LENGTH_DIFFERENT_THAN_DATA_LENGTH(uint256 targetsLength, uint256 dataLength);\\n  error LOW_LEVEL_CALL_FAILED();\\n  error REBALANCE_AMOUNT_CANNOT_BE_ZERO();\\n  error VARIABLE_FEE_TOO_HIGH(uint256 maxVarFee, uint256 actualVarFee);\\n  error VAULT_NOT_INITIALIZED(uint256 vaultId);\\n  error ALREADY_OWNER(address owner, address ownedProxy);\\n  error CALLER_NOT_PENDING_OWNER(address caller, address pendingOwner);\\n  error UNAUTHORIZED_CALLER();\\n  error PAUSED();\\n}\\n\",\"keccak256\":\"0xc1749264f50f0c27653f862ccb7a87e1930603f67cc0bbb29ae533ab323ea155\",\"license\":\"Unlicense\"},\"contracts/proxy/interfaces/IMIMOProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\n\\nimport \\\"./IMIMOProxyFactory.sol\\\";\\n\\n/// @title IMIMOProxy\\n/// @notice Proxy contract to compose transactions on owner's behalf.\\ninterface IMIMOProxy {\\n  event Execute(address indexed target, bytes data, bytes response);\\n\\n  function execute(address target, bytes calldata data) external payable returns (bytes memory response);\\n\\n  function proxyFactory() external returns (IMIMOProxyFactory);\\n}\\n\",\"keccak256\":\"0x3b1ba487a3e28063c13b5bf5dd78d738f232f7a801a0d164e499843772187532\",\"license\":\"Unlicense\"},\"contracts/proxy/interfaces/IMIMOProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMIMOProxy.sol\\\";\\nimport \\\"./IMIMOProxyGuard.sol\\\";\\n\\n/// @title IMIMOProxyFactory\\n/// @notice Deploys new proxies with CREATE2.\\ninterface IMIMOProxyFactory {\\n  struct ProxyState {\\n    address owner;\\n    IMIMOProxyGuard proxyGuard;\\n    uint256 minGas;\\n  }\\n\\n  event ProxyDeployed(address indexed owner, address indexed proxy, ProxyState proxyState);\\n\\n  event PermissionsCleared(address indexed proxy, address newProxyGuard);\\n\\n  event OwnershipTransferred(address indexed proxy, address indexed previousOwner, address indexed newOwner);\\n\\n  event OwnershipClaimed(address indexed proxy, address indexed newOwner);\\n\\n  event MinGasSet(address indexed proxy, uint256 minGas);\\n\\n  function deploy() external;\\n\\n  function transferOwnership(address proxy, address newOwner) external;\\n\\n  function claimOwnership(address proxy, bool clear) external;\\n\\n  function clearPermissions(address proxy) external;\\n\\n  function setMinGas(address proxy, uint256 minGas) external;\\n\\n  function mimoProxyGuardBase() external returns (address);\\n\\n  function isProxy(address proxy) external returns (bool result);\\n\\n  function VERSION() external view returns (uint256);\\n\\n  function getProxyState(address proxy) external view returns (ProxyState memory proxyState);\\n\\n  function getCurrentProxy(address owner) external view returns (IMIMOProxy proxy);\\n\\n  function getPendingOwner(address proxy) external view returns (address pendingOwner);\\n}\\n\",\"keccak256\":\"0xd679829ba199a63195d7ef3db753643ba620c7b2d2b8e8293069a8dbf8f2a373\",\"license\":\"Unlicense\"},\"contracts/proxy/interfaces/IMIMOProxyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\n\\nimport \\\"./IMIMOProxyFactory.sol\\\";\\n\\ninterface IMIMOProxyGuard {\\n  event PermissionSet(address indexed envoy, address indexed target, bytes4 selector, bool permission);\\n\\n  function initialize(address proxyFactory, address proxy) external;\\n\\n  function setPermission(\\n    address envoy,\\n    address target,\\n    bytes4 selector,\\n    bool permission\\n  ) external;\\n\\n  function getPermission(\\n    address envoy,\\n    address target,\\n    bytes4 selector\\n  ) external view returns (bool);\\n\\n  function getProxy() external view returns (address proxy);\\n\\n  function getProxyFactory() external view returns (IMIMOProxyFactory proxyFactory);\\n}\\n\",\"keccak256\":\"0xceebcf2978b34653aaa522ee14ab436aee7e795bdd9c071bd202fb7b8b6a74fa\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001b5f38038062001b5f833981016040819052620000359162000118565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b03841615806200009257506001600160a01b038316155b80620000a557506001600160a01b038216155b80620000b857506001600160a01b038116155b15620000d757604051636a8403ad60e01b815260040160405180910390fd5b6001600160a01b0393841660a05291831660c052821660e05216610100523060805262000180565b6001600160a01b03811681146200011557600080fd5b50565b600080600080608085870312156200012f57600080fd5b84516200013c81620000ff565b60208601519094506200014f81620000ff565b60408601519093506200016281620000ff565b60608601519092506200017581620000ff565b939692955090935050565b60805160a05160c05160e051610100516118f962000266600039600081816102ee015281816106100152818161082d01528181610c9c01528181610e82015261107101526000818161016d015281816106900152610f0101526000818161026501526108ba01526000818161036201528181610594015281816107b101528181610a0101528181610a4c01528181610c1f01528181610db901528181610feb015261120101526000818161039e015281816104d9015281816106f60152818161093f01528181610b6b01528181610d1901528181610f30015261116101526118f96000f3fe6080604052600436106101145760003560e01c806365d55287116100a0578063c7cdea3711610064578063c7cdea3714610310578063e30c397814610330578063f2f4eb2614610350578063f6326fb314610384578063f6b4dfb41461038c57600080fd5b806365d55287146102535780638456cb59146102875780638da5cb5b1461029c578063a1789085146102bc578063c10f1a75146102dc57600080fd5b8063441a3e70116100e7578063441a3e70146101c157806347e7ef24146101e15780634e71e0c81461020157806357f256e3146102165780635c975abb1461022957600080fd5b8063078dfbe7146101195780630ecbcdab1461013b57806316d8a5a91461015b5780633f4ba83a146101ac575b600080fd5b34801561012557600080fd5b5061013961013436600461163a565b6103c0565b005b34801561014757600080fd5b50610139610156366004611685565b6104d7565b34801561016757600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101b857600080fd5b506101396106bb565b3480156101cd57600080fd5b506101396101dc366004611685565b6106f4565b3480156101ed57600080fd5b506101396101fc3660046116a7565b61093d565b34801561020d57600080fd5b50610139610aac565b6101396102243660046116d3565b610b69565b34801561023557600080fd5b50600154600160a01b900460ff1660405190151581526020016101a3565b34801561025f57600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561029357600080fd5b50610139610cd8565b3480156102a857600080fd5b5060005461018f906001600160a01b031681565b3480156102c857600080fd5b506101396102d73660046116ec565b610d17565b3480156102e857600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031c57600080fd5b5061013961032b366004611685565b610f2e565b34801561033c57600080fd5b5060015461018f906001600160a01b031681565b34801561035c57600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b61013961115f565b34801561039857600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146103f35760405162461bcd60e51b81526004016103ea90611721565b60405180910390fd5b81156104b6576001600160a01b03831615158061040d5750805b6104515760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b60448201526064016103ea565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055505050565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190611756565b1561057757604051632a6ab56360e21b815260040160405180910390fd5b604051630ecbcdab60e01b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630ecbcdab90604401600060405180830381600087803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b505060405163751913f760e11b81523060048201526106b792507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063ea3227ee906024015b606060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190611773565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083611275565b5050565b6000546001600160a01b031633146106e55760405162461bcd60e51b81526004016103ea90611721565b6001805460ff60a01b19169055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107769190611756565b1561079457604051632a6ab56360e21b815260040160405180910390fd5b604051630441a3e760e41b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b1580156107fd57600080fd5b505af1158015610811573d6000803e3d6000fd5b505060405163751913f760e11b81523060048201526106b792507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063ea3227ee90602401606060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190611773565b5160405163b508bc5960e01b81526004810185905283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b508bc5990602401602060405180830381865afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d91906117ec565b6001600160a01b03169190611275565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bf9190611756565b156109dd57604051632a6ab56360e21b815260040160405180910390fd5b6109f26001600160a01b0383163330846112d8565b610a266001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611310565b6040516311f9fbc960e21b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906347e7ef2490604401600060405180830381600087803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b505050505050565b6001546001600160a01b0316338114610b075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016103ea565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190611756565b15610c0957604051632a6ab56360e21b815260040160405180910390fd5b6040516357f256e360e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906357f256e39034906024016000604051808303818588803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505060405163751913f760e11b8152306004820152610cd593507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063ea3227ee9150602401610644565b50565b6000546001600160a01b03163314610d025760405162461bcd60e51b81526004016103ea90611721565b6001805460ff60a01b1916600160a01b179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190611756565b15610db757604051632a6ab56360e21b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610ded6001600160a01b0385163330866112d8565b610e016001600160a01b0385168285611310565b60405163a178908560e01b81526001600160a01b038581166004830152602482018590526044820184905282169063a178908590606401600060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b505060405163751913f760e11b8152306004820152610f2892507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063ea3227ee90602401606060405180830381865afa158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef69190611773565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084611275565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb09190611756565b15610fce57604051632a6ab56360e21b815260040160405180910390fd5b60405163c7cdea3760e01b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7cdea3790604401600060405180830381600087803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b505060405163751913f760e11b8152306004820152600092508291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ea3227ee90602401606060405180830381865afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc9190611773565b516040516001600160a01b03909116908490600081818185875af1925050503d8060008114611127576040519150601f19603f3d011682016040523d82523d6000602084013e61112c565b606091505b509150915081610f28578051156111465780518082602001fd5b6040516386bda99560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190611756565b156111ff57604051632a6ab56360e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f6326fb3346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561125a57600080fd5b505af115801561126e573d6000803e3d6000fd5b5050505050565b6040516001600160a01b0383166024820152604481018290526104d290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526113c2565b6040516001600160a01b0380851660248301528316604482015260648101829052610f289085906323b872dd60e01b906084016112a1565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190611809565b61138f9190611822565b6040516001600160a01b038516602482015260448101829052909150610f2890859063095ea7b360e01b906064016112a1565b6000611417826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114949092919063ffffffff16565b8051909150156104d257808060200190518101906114359190611756565b6104d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ea565b60606114a384846000856114ad565b90505b9392505050565b60608247101561150e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ea565b6001600160a01b0385163b6115655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ea565b600080866001600160a01b031685876040516115819190611874565b60006040518083038185875af1925050503d80600081146115be576040519150601f19603f3d011682016040523d82523d6000602084013e6115c3565b606091505b50915091506115d38282866115de565b979650505050505050565b606083156115ed5750816114a6565b8251156115fd5782518084602001fd5b8160405162461bcd60e51b81526004016103ea9190611890565b6001600160a01b0381168114610cd557600080fd5b8015158114610cd557600080fd5b60008060006060848603121561164f57600080fd5b833561165a81611617565b9250602084013561166a8161162c565b9150604084013561167a8161162c565b809150509250925092565b6000806040838503121561169857600080fd5b50508035926020909101359150565b600080604083850312156116ba57600080fd5b82356116c581611617565b946020939093013593505050565b6000602082840312156116e557600080fd5b5035919050565b60008060006060848603121561170157600080fd5b833561170c81611617565b95602085013595506040909401359392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561176857600080fd5b81516114a68161162c565b60006060828403121561178557600080fd5b6040516060810181811067ffffffffffffffff821117156117b657634e487b7160e01b600052604160045260246000fd5b60405282516117c481611617565b815260208301516117d481611617565b60208201526040928301519281019290925250919050565b6000602082840312156117fe57600080fd5b81516114a681611617565b60006020828403121561181b57600080fd5b5051919050565b6000821982111561184357634e487b7160e01b600052601160045260246000fd5b500190565b60005b8381101561186357818101518382015260200161184b565b83811115610f285750506000910152565b60008251611886818460208701611848565b9190910192915050565b60208152600082518060208401526118af816040850160208701611848565b601f01601f1916919091016040019291505056fea264697066735822122010b8a873ff54dc0b68dbb8de2c36898e9016a312c73e0e2342677b8e431f705364736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c806365d55287116100a0578063c7cdea3711610064578063c7cdea3714610310578063e30c397814610330578063f2f4eb2614610350578063f6326fb314610384578063f6b4dfb41461038c57600080fd5b806365d55287146102535780638456cb59146102875780638da5cb5b1461029c578063a1789085146102bc578063c10f1a75146102dc57600080fd5b8063441a3e70116100e7578063441a3e70146101c157806347e7ef24146101e15780634e71e0c81461020157806357f256e3146102165780635c975abb1461022957600080fd5b8063078dfbe7146101195780630ecbcdab1461013b57806316d8a5a91461015b5780633f4ba83a146101ac575b600080fd5b34801561012557600080fd5b5061013961013436600461163a565b6103c0565b005b34801561014757600080fd5b50610139610156366004611685565b6104d7565b34801561016757600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101b857600080fd5b506101396106bb565b3480156101cd57600080fd5b506101396101dc366004611685565b6106f4565b3480156101ed57600080fd5b506101396101fc3660046116a7565b61093d565b34801561020d57600080fd5b50610139610aac565b6101396102243660046116d3565b610b69565b34801561023557600080fd5b50600154600160a01b900460ff1660405190151581526020016101a3565b34801561025f57600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561029357600080fd5b50610139610cd8565b3480156102a857600080fd5b5060005461018f906001600160a01b031681565b3480156102c857600080fd5b506101396102d73660046116ec565b610d17565b3480156102e857600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031c57600080fd5b5061013961032b366004611685565b610f2e565b34801561033c57600080fd5b5060015461018f906001600160a01b031681565b34801561035c57600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b61013961115f565b34801561039857600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146103f35760405162461bcd60e51b81526004016103ea90611721565b60405180910390fd5b81156104b6576001600160a01b03831615158061040d5750805b6104515760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b60448201526064016103ea565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055505050565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190611756565b1561057757604051632a6ab56360e21b815260040160405180910390fd5b604051630ecbcdab60e01b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630ecbcdab90604401600060405180830381600087803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b505060405163751913f760e11b81523060048201526106b792507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063ea3227ee906024015b606060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190611773565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083611275565b5050565b6000546001600160a01b031633146106e55760405162461bcd60e51b81526004016103ea90611721565b6001805460ff60a01b19169055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107769190611756565b1561079457604051632a6ab56360e21b815260040160405180910390fd5b604051630441a3e760e41b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b1580156107fd57600080fd5b505af1158015610811573d6000803e3d6000fd5b505060405163751913f760e11b81523060048201526106b792507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063ea3227ee90602401606060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190611773565b5160405163b508bc5960e01b81526004810185905283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b508bc5990602401602060405180830381865afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d91906117ec565b6001600160a01b03169190611275565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bf9190611756565b156109dd57604051632a6ab56360e21b815260040160405180910390fd5b6109f26001600160a01b0383163330846112d8565b610a266001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611310565b6040516311f9fbc960e21b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906347e7ef2490604401600060405180830381600087803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b505050505050565b6001546001600160a01b0316338114610b075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016103ea565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190611756565b15610c0957604051632a6ab56360e21b815260040160405180910390fd5b6040516357f256e360e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906357f256e39034906024016000604051808303818588803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505060405163751913f760e11b8152306004820152610cd593507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063ea3227ee9150602401610644565b50565b6000546001600160a01b03163314610d025760405162461bcd60e51b81526004016103ea90611721565b6001805460ff60a01b1916600160a01b179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190611756565b15610db757604051632a6ab56360e21b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610ded6001600160a01b0385163330866112d8565b610e016001600160a01b0385168285611310565b60405163a178908560e01b81526001600160a01b038581166004830152602482018590526044820184905282169063a178908590606401600060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b505060405163751913f760e11b8152306004820152610f2892507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063ea3227ee90602401606060405180830381865afa158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef69190611773565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084611275565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb09190611756565b15610fce57604051632a6ab56360e21b815260040160405180910390fd5b60405163c7cdea3760e01b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c7cdea3790604401600060405180830381600087803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b505060405163751913f760e11b8152306004820152600092508291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ea3227ee90602401606060405180830381865afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc9190611773565b516040516001600160a01b03909116908490600081818185875af1925050503d8060008114611127576040519150601f19603f3d011682016040523d82523d6000602084013e61112c565b606091505b509150915081610f28578051156111465780518082602001fd5b6040516386bda99560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190611756565b156111ff57604051632a6ab56360e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f6326fb3346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561125a57600080fd5b505af115801561126e573d6000803e3d6000fd5b5050505050565b6040516001600160a01b0383166024820152604481018290526104d290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526113c2565b6040516001600160a01b0380851660248301528316604482015260648101829052610f289085906323b872dd60e01b906084016112a1565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190611809565b61138f9190611822565b6040516001600160a01b038516602482015260448101829052909150610f2890859063095ea7b360e01b906064016112a1565b6000611417826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114949092919063ffffffff16565b8051909150156104d257808060200190518101906114359190611756565b6104d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ea565b60606114a384846000856114ad565b90505b9392505050565b60608247101561150e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ea565b6001600160a01b0385163b6115655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ea565b600080866001600160a01b031685876040516115819190611874565b60006040518083038185875af1925050503d80600081146115be576040519150601f19603f3d011682016040523d82523d6000602084013e6115c3565b606091505b50915091506115d38282866115de565b979650505050505050565b606083156115ed5750816114a6565b8251156115fd5782518084602001fd5b8160405162461bcd60e51b81526004016103ea9190611890565b6001600160a01b0381168114610cd557600080fd5b8015158114610cd557600080fd5b60008060006060848603121561164f57600080fd5b833561165a81611617565b9250602084013561166a8161162c565b9150604084013561167a8161162c565b809150509250925092565b6000806040838503121561169857600080fd5b50508035926020909101359150565b600080604083850312156116ba57600080fd5b82356116c581611617565b946020939093013593505050565b6000602082840312156116e557600080fd5b5035919050565b60008060006060848603121561170157600080fd5b833561170c81611617565b95602085013595506040909401359392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561176857600080fd5b81516114a68161162c565b60006060828403121561178557600080fd5b6040516060810181811067ffffffffffffffff821117156117b657634e487b7160e01b600052604160045260246000fd5b60405282516117c481611617565b815260208301516117d481611617565b60208201526040928301519281019290925250919050565b6000602082840312156117fe57600080fd5b81516114a681611617565b60006020828403121561181b57600080fd5b5051919050565b6000821982111561184357634e487b7160e01b600052601160045260246000fd5b500190565b60005b8381101561186357818101518382015260200161184b565b83811115610f285750506000910152565b60008251611886818460208701611848565b9190910192915050565b60208152600082518060208401526118af816040850160208701611848565b601f01601f1916919091016040019291505056fea264697066735822122010b8a873ff54dc0b68dbb8de2c36898e9016a312c73e0e2342677b8e431f705364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9855,
        "contract": "contracts/actions/MIMOVaultActions.sol:MIMOVaultActions",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9857,
        "contract": "contracts/actions/MIMOVaultActions.sol:MIMOVaultActions",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3065,
        "contract": "contracts/actions/MIMOVaultActions.sol:MIMOVaultActions",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}